{"version":3,"sources":["../../src/datasource-zabbix/responseHandler.js"],"names":["convertHistory","history","items","addHostName","convertPointCallback","grouped_history","_","groupBy","hosts","uniqBy","flatten","map","hist","itemid","item","find","alias","name","keys","length","host","hostid","target","datapoints","handleHistory","convertHistoryPoint","handleTrends","valueType","partial","convertTrendPoint","handleText","convertTextCallback","convertText","point","value","textFilter","extractText","useCaptureGroups","clock","Math","round","ns","str","pattern","extractPattern","RegExp","extractedValue","exec","handleItemsAsTable","table","TableModel","columns","forEach","head","push","key","col","row","rows","handleSLAResponse","itservice","slaProperty","slaObject","targetSLA","serviceid","sla","property","targetStatus","parseInt","status","to","from","Number","value_min","value_max","value_avg","value_sum","value_count","uniq"],"mappings":"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","file":"responseHandler.js","sourcesContent":["import _ from 'lodash';\nimport TableModel from 'app/core/table_model';\n\n/**\n * Convert Zabbix API history.get response to Grafana format\n *\n * @return {Array}            Array of timeseries in Grafana format\n *                            {\n *                               target: \"Metric name\",\n *                               datapoints: [[<value>, <unixtime>], ...]\n *                            }\n */\nfunction convertHistory(history, items, addHostName, convertPointCallback) {\n  /**\n   * Response should be in the format:\n   * data: [\n   *          {\n   *             target: \"Metric name\",\n   *             datapoints: [[<value>, <unixtime>], ...]\n   *          }, ...\n   *       ]\n   */\n\n  // Group history by itemid\n  var grouped_history = _.groupBy(history, 'itemid');\n  var hosts = _.uniqBy(_.flatten(_.map(items, 'hosts')), 'hostid');  //uniqBy is needed to deduplicate\n\n  return _.map(grouped_history, function(hist, itemid) {\n    var item = _.find(items, {'itemid': itemid});\n    var alias = item.name;\n    if (_.keys(hosts).length > 1 && addHostName) {   //only when actual multi hosts selected\n      var host = _.find(hosts, {'hostid': item.hostid});\n      alias = host.name + \": \" + alias;\n    }\n    return {\n      target: alias,\n      datapoints: _.map(hist, convertPointCallback)\n    };\n  });\n}\n\nfunction handleHistory(history, items, addHostName = true) {\n  return convertHistory(history, items, addHostName, convertHistoryPoint);\n}\n\nfunction handleTrends(history, items, valueType, addHostName = true) {\n  var convertPointCallback = _.partial(convertTrendPoint, valueType);\n  return convertHistory(history, items, addHostName, convertPointCallback);\n}\n\nfunction handleText(history, items, target, addHostName = true) {\n  let convertTextCallback = _.partial(convertText, target);\n  return convertHistory(history, items, addHostName, convertTextCallback);\n}\n\nfunction convertText(target, point) {\n  let value = point.value;\n\n  // Regex-based extractor\n  if (target.textFilter) {\n    value = extractText(point.value, target.textFilter, target.useCaptureGroups);\n  }\n\n  return [\n    value,\n    point.clock * 1000 + Math.round(point.ns / 1000000)\n  ];\n}\n\nfunction extractText(str, pattern, useCaptureGroups) {\n  let extractPattern = new RegExp(pattern);\n  let extractedValue = extractPattern.exec(str);\n  if (extractedValue) {\n    if (useCaptureGroups) {\n      extractedValue = extractedValue[1];\n    } else {\n      extractedValue = extractedValue[0];\n    }\n  }\n  return extractedValue;\n}\n\nfunction handleItemsAsTable(items) {\n  let table = new TableModel();\n  let columns = [];\n\n  _.forEach(_.keys(_.head(items)), key => {\n    columns.push(key);\n  });\n  table.columns = _.map(columns, col => {\n    return { \"text\": col };\n  });\n\n  _.forEach(items, item => {\n    let row = [];\n    _.forEach(columns, key => {\n      row.push(item[key]);\n    });\n    table.rows.push(row);\n  });\n\n  return table;\n}\n\nfunction handleSLAResponse(itservice, slaProperty, slaObject) {\n  var targetSLA = slaObject[itservice.serviceid].sla[0];\n  if (slaProperty.property === 'status') {\n    var targetStatus = parseInt(slaObject[itservice.serviceid].status);\n    return {\n      target: itservice.name + ' ' + slaProperty.name,\n      datapoints: [\n        [targetStatus, targetSLA.to * 1000]\n      ]\n    };\n  } else {\n    return {\n      target: itservice.name + ' ' + slaProperty.name,\n      datapoints: [\n        [targetSLA[slaProperty.property], targetSLA.from * 1000],\n        [targetSLA[slaProperty.property], targetSLA.to * 1000]\n      ]\n    };\n  }\n}\n\nfunction convertHistoryPoint(point) {\n  // Value must be a number for properly work\n  return [\n    Number(point.value),\n    point.clock * 1000 + Math.round(point.ns / 1000000)\n  ];\n}\n\nfunction convertTrendPoint(valueType, point) {\n  var value;\n  switch (valueType) {\n    case \"min\":\n      value = point.value_min;\n      break;\n    case \"max\":\n      value = point.value_max;\n      break;\n    case \"avg\":\n      value = point.value_avg;\n      break;\n    case \"sum\":\n      value = point.value_sum;\n      break;\n    case \"count\":\n      value = point.value_count;\n      break;\n    default:\n      value = point.value_avg;\n  }\n\n  return [\n    Number(value),\n    point.clock * 1000\n  ];\n}\n\nexport default {\n  handleHistory: handleHistory,\n  convertHistory: convertHistory,\n  handleTrends: handleTrends,\n  handleText: handleText,\n  handleSLAResponse: handleSLAResponse,\n  handleItemsAsTable: handleItemsAsTable\n};\n\n// Fix for backward compatibility with lodash 2.4\nif (!_.uniqBy) {_.uniqBy = _.uniq;}\n"]}