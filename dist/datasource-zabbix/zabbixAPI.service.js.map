{"version":3,"sources":["../../src/datasource-zabbix/zabbixAPI.service.js"],"names":["ZabbixAPIServiceFactory","alertSrv","zabbixAPICoreService","ZabbixAPI","api_url","username","password","basicAuth","withCredentials","url","auth","requestOptions","loginPromise","loginErrorCount","maxLoginAttempts","zabbixAPICore","getTrend","getTrend_ZBXNEXT1193","method","params","request","catch","isNotAuthorized","error","data","loginOnce","then","message","statusText","alertAPIError","timeout","set","Promise","resolve","login","getVersion","eventid","eventids","output","sortfield","real_hosts","groupids","hostids","appids","itemtype","webitems","filter","selectHosts","applicationids","value_type","expandItems","items","forEach","item","name","utils","expandItemName","key_","itemid","itemids","length","lastvalue","timeFrom","timeTill","grouped_items","_","groupBy","promises","map","history","sortorder","time_from","time_till","all","flatten","trend","self","serviceids","timeTo","intervals","from","to","showTriggers","expandDescription","expandData","expandComment","monitored","skipDependent","value","selectGroups","selectItems","selectLastEvent","lastChangeSince","lastChangeTill","objectids","showEvents","select_acknowledges","preservekeys","events","event","acknowledges","angular","module","factory"],"mappings":"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","file":"zabbixAPI.service.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport * as utils from './utils';\nimport './zabbixAPICore.service';\n\n/** @ngInject */\nfunction ZabbixAPIServiceFactory(alertSrv, zabbixAPICoreService) {\n\n  /**\n   * Zabbix API Wrapper.\n   * Creates Zabbix API instance with given parameters (url, credentials and other).\n   * Wraps API calls and provides high-level methods.\n   */\n  class ZabbixAPI {\n\n    constructor(api_url, username, password, basicAuth, withCredentials) {\n      this.url              = api_url;\n      this.username         = username;\n      this.password         = password;\n      this.auth             = \"\";\n\n      this.requestOptions = {\n        basicAuth: basicAuth,\n        withCredentials: withCredentials\n      };\n\n      this.loginPromise = null;\n      this.loginErrorCount = 0;\n      this.maxLoginAttempts = 3;\n\n      this.alertSrv = alertSrv;\n      this.zabbixAPICore = zabbixAPICoreService;\n\n      this.getTrend = this.getTrend_ZBXNEXT1193;\n      //getTrend = getTrend_30;\n    }\n\n    //////////////////////////\n    // Core method wrappers //\n    //////////////////////////\n\n    request(method, params) {\n      return this.zabbixAPICore.request(this.url, method, params, this.requestOptions, this.auth)\n      .catch(error => {\n        if (isNotAuthorized(error.data)) {\n          // Handle auth errors\n          this.loginErrorCount++;\n          if (this.loginErrorCount > this.maxLoginAttempts) {\n            this.loginErrorCount = 0;\n            return null;\n          } else {\n            return this.loginOnce()\n            .then(() => this.request(method, params));\n          }\n        } else {\n          // Handle API errors\n          let message = error.data ? error.data : error.statusText;\n          this.alertAPIError(message);\n        }\n      });\n    }\n\n    alertAPIError(message, timeout = 5000) {\n      this.alertSrv.set(\n        \"Zabbix API Error\",\n        message,\n        'error',\n        timeout\n      );\n    }\n\n    /**\n     * When API unauthenticated or auth token expired each request produce login()\n     * call. But auth token is common to all requests. This function wraps login() method\n     * and call it once. If login() already called just wait for it (return its promise).\n     * @return login promise\n     */\n    loginOnce() {\n      if (!this.loginPromise) {\n        this.loginPromise = Promise.resolve(\n          this.login().then(auth => {\n            this.auth = auth;\n            this.loginPromise = null;\n            return auth;\n          })\n        );\n      }\n      return this.loginPromise;\n    }\n\n    /**\n     * Get authentication token.\n     */\n    login() {\n      return this.zabbixAPICore.login(this.url, this.username, this.password, this.requestOptions);\n    }\n\n    /**\n     * Get Zabbix API version\n     */\n    getVersion() {\n      return this.zabbixAPICore.getVersion(this.url, this.requestOptions);\n    }\n\n    ////////////////////////////////\n    // Zabbix API method wrappers //\n    ////////////////////////////////\n\n    acknowledgeEvent(eventid, message) {\n      var params = {\n        eventids: eventid,\n        message: message\n      };\n\n      return this.request('event.acknowledge', params);\n    }\n\n    getGroups() {\n      var params = {\n        output: ['name'],\n        sortfield: 'name',\n        real_hosts: true\n      };\n\n      return this.request('hostgroup.get', params);\n    }\n\n    getHosts(groupids) {\n      var params = {\n        output: ['name', 'host'],\n        sortfield: 'name'\n      };\n      if (groupids) {\n        params.groupids = groupids;\n      }\n\n      return this.request('host.get', params);\n    }\n\n    getApps(hostids) {\n      var params = {\n        output: ['applicationid', 'name'],\n        hostids: hostids\n      };\n\n      return this.request('application.get', params);\n    }\n\n    /**\n     * Get Zabbix items\n     * @param  {[type]} hostids  host ids\n     * @param  {[type]} appids   application ids\n     * @param  {String} itemtype 'num' or 'text'\n     * @return {[type]}          array of items\n     */\n    getItems(hostids, appids, itemtype) {\n      var params = {\n        output: [\n          'name', 'key_',\n          'value_type',\n          'hostid',\n          'status',\n          'state'\n        ],\n        sortfield: 'name',\n        webitems: true,\n        filter: {},\n        selectHosts: [\n          'hostid',\n          'name'\n        ]\n      };\n      if (hostids) {\n        params.hostids = hostids;\n      }\n      if (appids) {\n        params.applicationids = appids;\n      }\n      if (itemtype === 'num') {\n        // Return only numeric metrics\n        params.filter.value_type = [0, 3];\n      }\n      if (itemtype === 'text') {\n        // Return only text metrics\n        params.filter.value_type = [1, 2, 4];\n      }\n\n      return this.request('item.get', params)\n      .then(expandItems);\n\n      function expandItems(items) {\n        items.forEach(item => {\n          item.item = item.name;\n          item.name = utils.expandItemName(item.item, item.key_);\n          return item;\n        });\n        return items;\n      }\n    }\n\n    getLastValue(itemid) {\n      var params = {\n        output: ['lastvalue'],\n        itemids: itemid\n      };\n      return this.request('item.get', params)\n      .then(items => items.length ? items[0].lastvalue : null);\n    }\n\n    /**\n     * Perform history query from Zabbix API\n     *\n     * @param  {Array}  items       Array of Zabbix item objects\n     * @param  {Number} timeFrom   Time in seconds\n     * @param  {Number} timeTill   Time in seconds\n     * @return {Array}  Array of Zabbix history objects\n     */\n    getHistory(items, timeFrom, timeTill) {\n\n      // Group items by value type and perform request for each value type\n      let grouped_items = _.groupBy(items, 'value_type');\n      let promises = _.map(grouped_items, (items, value_type) => {\n        let itemids = _.map(items, 'itemid');\n        let params = {\n          output: 'extend',\n          history: value_type,\n          itemids: itemids,\n          sortfield: 'clock',\n          sortorder: 'ASC',\n          time_from: timeFrom\n        };\n\n        // Relative queries (e.g. last hour) don't include an end time\n        if (timeTill) {\n          params.time_till = timeTill;\n        }\n\n        return this.request('history.get', params);\n      });\n\n      return Promise.all(promises).then(_.flatten);\n    }\n\n    /**\n     * Perform trends query from Zabbix API\n     * Use trends api extension from ZBXNEXT-1193 patch.\n     *\n     * @param  {Array}  items       Array of Zabbix item objects\n     * @param  {Number} time_from   Time in seconds\n     * @param  {Number} time_till   Time in seconds\n     * @return {Array}  Array of Zabbix trend objects\n     */\n    getTrend_ZBXNEXT1193(items, timeFrom, timeTill) {\n\n      // Group items by value type and perform request for each value type\n      let grouped_items = _.groupBy(items, 'value_type');\n      let promises = _.map(grouped_items, (items, value_type) => {\n        let itemids = _.map(items, 'itemid');\n        let params = {\n          output: 'extend',\n          trend: value_type,\n          itemids: itemids,\n          sortfield: 'clock',\n          sortorder: 'ASC',\n          time_from: timeFrom\n        };\n\n        // Relative queries (e.g. last hour) don't include an end time\n        if (timeTill) {\n          params.time_till = timeTill;\n        }\n\n        return this.request('trend.get', params);\n      });\n\n      return Promise.all(promises).then(_.flatten);\n    }\n\n    getTrend_30(items, time_from, time_till, value_type) {\n      var self = this;\n      var itemids = _.map(items, 'itemid');\n\n      var params = {\n        output: [\"itemid\",\n          \"clock\",\n          value_type\n        ],\n        itemids: itemids,\n        time_from: time_from\n      };\n\n      // Relative queries (e.g. last hour) don't include an end time\n      if (time_till) {\n        params.time_till = time_till;\n      }\n\n      return self.request('trend.get', params);\n    }\n\n    getITService(serviceids) {\n      var params = {\n        output: 'extend',\n        serviceids: serviceids\n      };\n      return this.request('service.get', params);\n    }\n\n    getSLA(serviceids, timeFrom, timeTo) {\n      var params = {\n        serviceids: serviceids,\n        intervals: [{\n          from: timeFrom,\n          to: timeTo\n        }]\n      };\n      return this.request('service.getsla', params);\n    }\n\n    getTriggers(groupids, hostids, applicationids, showTriggers, timeFrom, timeTo) {\n      var params = {\n        output: 'extend',\n        groupids: groupids,\n        hostids: hostids,\n        applicationids: applicationids,\n        expandDescription: true,\n        expandData: true,\n        expandComment: true,\n        monitored: true,\n        skipDependent: true,\n        //only_true: true,\n        filter: {\n          value: 1\n        },\n        selectGroups: ['name'],\n        selectHosts: ['name', 'host'],\n        selectItems: ['name', 'key_', 'lastvalue'],\n        selectLastEvent: 'extend'\n      };\n\n      if (showTriggers) {\n        params.filter.value = showTriggers;\n      }\n\n      if (timeFrom || timeTo) {\n        params.lastChangeSince = timeFrom;\n        params.lastChangeTill = timeTo;\n      }\n\n      return this.request('trigger.get', params);\n    }\n\n    getEvents(objectids, timeFrom, timeTo, showEvents) {\n      var params = {\n        output: 'extend',\n        time_from: timeFrom,\n        time_till: timeTo,\n        objectids: objectids,\n        select_acknowledges: 'extend',\n        selectHosts: 'extend',\n        value: showEvents\n      };\n\n      return this.request('event.get', params);\n    }\n\n    getAcknowledges(eventids) {\n      var params = {\n        output: 'extend',\n        eventids: eventids,\n        preservekeys: true,\n        select_acknowledges: 'extend',\n        sortfield: 'clock',\n        sortorder: 'DESC'\n      };\n\n      return this.request('event.get', params)\n      .then(events => {\n        return _.filter(events, (event) => event.acknowledges.length);\n      });\n    }\n\n  }\n\n  return ZabbixAPI;\n}\n\nfunction isNotAuthorized(message) {\n  return (\n    message === \"Session terminated, re-login, please.\" ||\n    message === \"Not authorised.\" ||\n    message === \"Not authorized.\"\n  );\n}\n\nangular\n  .module('grafana.services')\n  .factory('zabbixAPIService', ZabbixAPIServiceFactory);\n"]}