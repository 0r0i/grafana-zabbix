{"version":3,"sources":["../../src/datasource-zabbix/timeseries.js"],"names":["downsample","datapoints","time_to","ms_interval","func","downsampledSeries","timeWindow","from","to","points_sum","points_num","value_avg","frame","i","length","push","_","max","min","reverse","groupBy","interval","groupByCallback","utils","parseInterval","frames","point","Math","floor","grouped","mapValues","points","map","sortByTime","value","timestamp","Number","groupBy_perf","grouped_series","frame_values","frame_value","frame_ts","getPointTimeFrame","POINT_TIMESTAMP","point_frame_ts","POINT_VALUE","sumSeries","timeseries","new_timestamps","uniq","flatten","sortBy","interpolated_timeseries","series","timestamps","new_points","difference","new_series","concat","each","interpolateSeries","new_timeseries","sum","j","scale","factor","scale_perf","delta","newSeries","deltaValue","rate","point_prev","valueDelta","timeDelta","simpleMovingAverage","n","sma","w_sum","w_avg","w_count","expMovingAverage","a","ema","ema_prev","ema_cur","COUNT","values","SUM","AVERAGE","values_non_null","getNonNullValues","MIN","MAX","MEDIAN","sorted","left","right","findNearestLeft","findNearestRight","linearInterpolation","point_index","indexOf","nearestRight","nearestLeft","exportedFunctions"],"mappings":";;;;;;;AAiBA;;;AAGA,WAASA,UAAT,CAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,WAAzC,EAAsDC,IAAtD,EAA4D;AAC1D,QAAIC,oBAAoB,EAAxB;AACA,QAAIC,aAAa;AACfC,YAAML,UAAU,IAAV,GAAiBC,WADR;AAEfK,UAAIN,UAAU;AAFC,KAAjB;;AAKA,QAAIO,aAAa,CAAjB;AACA,QAAIC,aAAa,CAAjB;AACA,QAAIC,YAAY,CAAhB;AACA,QAAIC,QAAQ,EAAZ;;AAEA,SAAK,IAAIC,IAAIZ,WAAWa,MAAX,GAAoB,CAAjC,EAAoCD,KAAK,CAAzC,EAA4CA,KAAK,CAAjD,EAAoD;AAClD,UAAIP,WAAWC,IAAX,GAAkBN,WAAWY,CAAX,EAAc,CAAd,CAAlB,IAAsCZ,WAAWY,CAAX,EAAc,CAAd,KAAoBP,WAAWE,EAAzE,EAA6E;AAC3EC,sBAAcR,WAAWY,CAAX,EAAc,CAAd,CAAd;AACAH;AACAE,cAAMG,IAAN,CAAWd,WAAWY,CAAX,EAAc,CAAd,CAAX;AACD,OAJD,MAKK;AACHF,oBAAYD,aAAaD,aAAaC,UAA1B,GAAuC,CAAnD;;AAEA,YAAIN,SAAS,KAAb,EAAoB;AAClBC,4BAAkBU,IAAlB,CAAuB,CAACC,EAAEC,GAAF,CAAML,KAAN,CAAD,EAAeN,WAAWE,EAA1B,CAAvB;AACD,SAFD,MAGK,IAAIJ,SAAS,KAAb,EAAoB;AACvBC,4BAAkBU,IAAlB,CAAuB,CAACC,EAAEE,GAAF,CAAMN,KAAN,CAAD,EAAeN,WAAWE,EAA1B,CAAvB;AACD;;AAED;AAJK,aAKA;AACHH,8BAAkBU,IAAlB,CAAuB,CAACJ,SAAD,EAAYL,WAAWE,EAAvB,CAAvB;AACD;;AAED;AACAF,mBAAWE,EAAX,GAAgBF,WAAWC,IAA3B;AACAD,mBAAWC,IAAX,IAAmBJ,WAAnB;;AAEAM,qBAAa,CAAb;AACAC,qBAAa,CAAb;AACAE,gBAAQ,EAAR;;AAEA;AACAC;AACD;AACF;AACD,WAAOR,kBAAkBc,OAAlB,EAAP;AACD;;AAED;;;;AAIA,WAASC,OAAT,CAAiBnB,UAAjB,EAA6BoB,QAA7B,EAAuCC,eAAvC,EAAwD;AACtD,QAAInB,cAAcoB,MAAMC,aAAN,CAAoBH,QAApB,CAAlB;;AAEA;AACA,QAAII,SAAST,EAAEI,OAAF,CAAUnB,UAAV,EAAsB,UAAUyB,KAAV,EAAiB;AAClD;AACA,aAAOC,KAAKC,KAAL,CAAWF,MAAM,CAAN,IAAWvB,WAAtB,IAAqCA,WAA5C;AACD,KAHY,CAAb;;AAKA;AACA;AACA,QAAI0B,UAAUb,EAAEc,SAAF,CAAYL,MAAZ,EAAoB,UAAUb,KAAV,EAAiB;AACjD,UAAImB,SAASf,EAAEgB,GAAF,CAAMpB,KAAN,EAAa,UAAUc,KAAV,EAAiB;AACzC,eAAOA,MAAM,CAAN,CAAP;AACD,OAFY,CAAb;AAGA,aAAOJ,gBAAgBS,MAAhB,CAAP;AACD,KALa,CAAd;;AAOA;AACA,WAAOE,WAAWjB,EAAEgB,GAAF,CAAMH,OAAN,EAAe,UAAUK,KAAV,EAAiBC,SAAjB,EAA4B;AAC3D,aAAO,CAACC,OAAOF,KAAP,CAAD,EAAgBE,OAAOD,SAAP,CAAhB,CAAP;AACD,KAFiB,CAAX,CAAP;AAGD;;AAED,WAASE,YAAT,CAAsBpC,UAAtB,EAAkCoB,QAAlC,EAA4CC,eAA5C,EAA6D;AAC3D,QAAInB,cAAcoB,MAAMC,aAAN,CAAoBH,QAApB,CAAlB;AACA,QAAIiB,iBAAiB,EAArB;AACA,QAAIC,eAAe,EAAnB;AACA,QAAIC,oBAAJ;AACA,QAAIC,WAAWxC,WAAWa,MAAX,GAAoB4B,kBAAkBzC,WAAW,CAAX,EAAc0C,eAAd,CAAlB,EAAkDxC,WAAlD,CAApB,GAAqF,CAApG;AACA,QAAIyC,iBAAiBH,QAArB;AACA,QAAIf,cAAJ;;AAEA,SAAK,IAAIb,IAAE,CAAX,EAAcA,IAAIZ,WAAWa,MAA7B,EAAqCD,GAArC,EAA0C;AACxCa,cAAQzB,WAAWY,CAAX,CAAR;AACA+B,uBAAiBF,kBAAkBhB,MAAMiB,eAAN,CAAlB,EAA0CxC,WAA1C,CAAjB;AACA,UAAIyC,mBAAmBH,QAAvB,EAAiC;AAC/BF,qBAAaxB,IAAb,CAAkBW,MAAMmB,WAAN,CAAlB;AACD,OAFD,MAEO,IAAID,iBAAiBH,QAArB,EAA+B;AACpCD,sBAAclB,gBAAgBiB,YAAhB,CAAd;AACAD,uBAAevB,IAAf,CAAoB,CAACyB,WAAD,EAAcC,QAAd,CAApB;;AAEA;AACAA,oBAAYtC,WAAZ;AACA,eAAOsC,WAAWG,cAAlB,EAAkC;AAChCN,yBAAevB,IAAf,CAAoB,CAAC,IAAD,EAAO0B,QAAP,CAApB;AACAA,sBAAYtC,WAAZ;AACD;AACDoC,uBAAe,CAACb,MAAMmB,WAAN,CAAD,CAAf;AACD;AACF;;AAEDL,kBAAclB,gBAAgBiB,YAAhB,CAAd;AACAD,mBAAevB,IAAf,CAAoB,CAACyB,WAAD,EAAcC,QAAd,CAApB;;AAEA,WAAOH,cAAP;AACD;;AAED;;;;AAIA,WAASQ,SAAT,CAAmBC,UAAnB,EAA+B;;AAE7B;AACA,QAAIC,iBAAiBhC,EAAEiC,IAAF,CAAOjC,EAAEgB,GAAF,CAAMhB,EAAEkC,OAAF,CAAUH,UAAV,EAAsB,IAAtB,CAAN,EAAmC,UAAUrB,KAAV,EAAiB;AAC9E,aAAOA,MAAM,CAAN,CAAP;AACD,KAF2B,CAAP,CAArB;AAGAsB,qBAAiBhC,EAAEmC,MAAF,CAASH,cAAT,CAAjB;;AAEA,QAAII,0BAA0BpC,EAAEgB,GAAF,CAAMe,UAAN,EAAkB,UAAUM,MAAV,EAAkB;AAChE,UAAIC,aAAatC,EAAEgB,GAAF,CAAMqB,MAAN,EAAc,UAAU3B,KAAV,EAAiB;AAC9C,eAAOA,MAAM,CAAN,CAAP;AACD,OAFgB,CAAjB;AAGA,UAAI6B,aAAavC,EAAEgB,GAAF,CAAMhB,EAAEwC,UAAF,CAAaR,cAAb,EAA6BM,UAA7B,CAAN,EAAgD,UAAUnB,SAAV,EAAqB;AACpF,eAAO,CAAC,IAAD,EAAOA,SAAP,CAAP;AACD,OAFgB,CAAjB;AAGA,UAAIsB,aAAaJ,OAAOK,MAAP,CAAcH,UAAd,CAAjB;AACA,aAAOtB,WAAWwB,UAAX,CAAP;AACD,KAT6B,CAA9B;;AAWAzC,MAAE2C,IAAF,CAAOP,uBAAP,EAAgCQ,iBAAhC;;AAEA,QAAIC,iBAAiB,EAArB;AACA,QAAIC,GAAJ;AACA,SAAK,IAAIjD,IAAImC,eAAelC,MAAf,GAAwB,CAArC,EAAwCD,KAAK,CAA7C,EAAgDA,GAAhD,EAAqD;AACnDiD,YAAM,CAAN;AACA,WAAK,IAAIC,IAAIX,wBAAwBtC,MAAxB,GAAiC,CAA9C,EAAiDiD,KAAK,CAAtD,EAAyDA,GAAzD,EAA8D;AAC5DD,eAAOV,wBAAwBW,CAAxB,EAA2BlD,CAA3B,EAA8B,CAA9B,CAAP;AACD;AACDgD,qBAAe9C,IAAf,CAAoB,CAAC+C,GAAD,EAAMd,eAAenC,CAAf,CAAN,CAApB;AACD;;AAED,WAAOoB,WAAW4B,cAAX,CAAP;AACD;;AAED,WAASG,KAAT,CAAe/D,UAAf,EAA2BgE,MAA3B,EAAmC;AACjC,WAAOjD,EAAEgB,GAAF,CAAM/B,UAAN,EAAkB,iBAAS;AAChC,aAAO,CACLyB,MAAM,CAAN,IAAWuC,MADN,EAELvC,MAAM,CAAN,CAFK,CAAP;AAID,KALM,CAAP;AAMD;;AAED,WAASwC,UAAT,CAAoBjE,UAApB,EAAgCgE,MAAhC,EAAwC;AACtC,SAAK,IAAIpD,IAAI,CAAb,EAAgBA,IAAIZ,WAAWa,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1CZ,iBAAWY,CAAX,IAAgB,CACdZ,WAAWY,CAAX,EAAcgC,WAAd,IAA6BoB,MADf,EAEdhE,WAAWY,CAAX,EAAc8B,eAAd,CAFc,CAAhB;AAID;;AAED,WAAO1C,UAAP;AACD;;AAED;;;;AAIA,WAASkE,KAAT,CAAelE,UAAf,EAA2B;AACzB,QAAImE,YAAY,EAAhB;AACA,QAAIC,mBAAJ;AACA,SAAK,IAAIxD,IAAI,CAAb,EAAgBA,IAAIZ,WAAWa,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1CwD,mBAAapE,WAAWY,CAAX,EAAc,CAAd,IAAmBZ,WAAWY,IAAI,CAAf,EAAkB,CAAlB,CAAhC;AACAuD,gBAAUrD,IAAV,CAAe,CAACsD,UAAD,EAAapE,WAAWY,CAAX,EAAc,CAAd,CAAb,CAAf;AACD;AACD,WAAOuD,SAAP;AACD;;AAED;;;;AAIA,WAASE,IAAT,CAAcrE,UAAd,EAA0B;AACxB,QAAImE,YAAY,EAAhB;AACA,QAAI1C,cAAJ;AAAA,QAAW6C,mBAAX;AACA,QAAIC,aAAa,CAAjB;AACA,QAAIC,YAAY,CAAhB;AACA,SAAK,IAAI5D,IAAI,CAAb,EAAgBA,IAAIZ,WAAWa,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1Ca,cAAQzB,WAAWY,CAAX,CAAR;AACA0D,mBAAatE,WAAWY,IAAI,CAAf,CAAb;;AAEA;AACA4D,kBAAY,CAAC/C,MAAMiB,eAAN,IAAyB4B,WAAW5B,eAAX,CAA1B,IAAyD,IAArE;;AAEA;AACA,UAAIjB,MAAMmB,WAAN,KAAsB0B,WAAW1B,WAAX,CAA1B,EAAmD;AACjD2B,qBAAa,CAAC9C,MAAMmB,WAAN,IAAqB0B,WAAW1B,WAAX,CAAtB,IAAiD4B,SAA9D;AACD;;AAEDL,gBAAUrD,IAAV,CAAe,CAACyD,UAAD,EAAa9C,MAAMiB,eAAN,CAAb,CAAf;AACD;AACD,WAAOyB,SAAP;AACD;;AAED,WAASM,mBAAT,CAA6BzE,UAA7B,EAAyC0E,CAAzC,EAA4C;AAC1C,QAAIC,MAAM,EAAV;AACA,QAAIC,cAAJ;AACA,QAAIC,QAAQ,IAAZ;AACA,QAAIC,UAAU,CAAd;;AAEA;AACA,SAAK,IAAIhB,IAAIY,CAAb,EAAgBZ,IAAI,CAApB,EAAuBA,GAAvB,EAA4B;AAC1B,UAAI9D,WAAW0E,IAAIZ,CAAf,EAAkBlB,WAAlB,MAAmC,IAAvC,EAA6C;AAC3CiC,iBAAS7E,WAAW0E,IAAIZ,CAAf,EAAkBlB,WAAlB,CAAT;AACAkC;AACD;AACF;AACD,QAAIA,UAAU,CAAd,EAAiB;AACfD,cAAQA,QAAQC,OAAhB;AACD,KAFD,MAEO;AACLD,cAAQ,IAAR;AACD;AACDF,QAAI7D,IAAJ,CAAS,CAAC+D,KAAD,EAAQ7E,WAAW0E,IAAI,CAAf,EAAkBhC,eAAlB,CAAR,CAAT;;AAEA,SAAK,IAAI9B,IAAI8D,CAAb,EAAgB9D,IAAIZ,WAAWa,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1C;AACA,UAAIZ,WAAWY,CAAX,EAAcgC,WAAd,MAA+B,IAAnC,EAAyC;AACvCgC,gBAAQC,QAAQC,OAAhB;AACAD,gBAAQ,CAACD,QAAQ5E,WAAWY,CAAX,EAAcgC,WAAd,CAAT,KAAwCkC,UAAU,CAAlD,CAAR;AACAA;AACD;AACD;AACA,UAAI9E,WAAWY,IAAI8D,CAAf,EAAkB9B,WAAlB,MAAmC,IAAvC,EAA6C;AAC3CgC,gBAAQC,QAAQC,OAAhB;AACA,YAAIA,UAAU,CAAd,EAAiB;AACfD,kBAAQ,CAACD,QAAQ5E,WAAWY,IAAI8D,CAAf,EAAkB9B,WAAlB,CAAT,KAA4CkC,UAAU,CAAtD,CAAR;AACAA;AACD,SAHD,MAGO;AACLD,kBAAQ,IAAR;AACAC,oBAAU,CAAV;AACD;AACF;AACDH,UAAI7D,IAAJ,CAAS,CAAC+D,KAAD,EAAQ7E,WAAWY,CAAX,EAAc8B,eAAd,CAAR,CAAT;AACD;AACD,WAAOiC,GAAP;AACD;;AAED,WAASI,gBAAT,CAA0B/E,UAA1B,EAAsCgF,CAAtC,EAAyC;AACvC;AACA,QAAIA,IAAI,CAAR,EAAW;AACTA,UAAI,KAAKA,IAAI,CAAT,CAAJ;AACD;AACD,QAAIC,MAAM,CAACjF,WAAW,CAAX,CAAD,CAAV;AACA,QAAIkF,WAAWlF,WAAW,CAAX,EAAc4C,WAAd,CAAf;AACA,QAAIuC,gBAAJ;AACA,SAAK,IAAIvE,IAAI,CAAb,EAAgBA,IAAIZ,WAAWa,MAA/B,EAAuCD,GAAvC,EAA4C;AAC1C,UAAIZ,WAAWY,CAAX,EAAcgC,WAAd,MAA+B,IAAnC,EAAyC;AACvCuC,kBAAUH,IAAIhF,WAAWY,CAAX,EAAcgC,WAAd,CAAJ,GAAiC,CAAC,IAAIoC,CAAL,IAAUE,QAArD;AACAA,mBAAWC,OAAX;AACAF,YAAInE,IAAJ,CAAS,CAACqE,OAAD,EAAUnF,WAAWY,CAAX,EAAc8B,eAAd,CAAV,CAAT;AACD,OAJD,MAIO;AACLuC,YAAInE,IAAJ,CAAS,CAAC,IAAD,EAAOd,WAAWY,CAAX,EAAc8B,eAAd,CAAP,CAAT;AACD;AACF;AACD,WAAOuC,GAAP;AACD;;AAED,WAASG,KAAT,CAAeC,MAAf,EAAuB;AACrB,WAAOA,OAAOxE,MAAd;AACD;;AAED,WAASyE,GAAT,CAAaD,MAAb,EAAqB;AACnB,QAAIxB,MAAM,IAAV;AACA,SAAK,IAAIjD,IAAI,CAAb,EAAgBA,IAAIyE,OAAOxE,MAA3B,EAAmCD,GAAnC,EAAwC;AACtC,UAAIyE,OAAOzE,CAAP,MAAc,IAAlB,EAAwB;AACtBiD,eAAOwB,OAAOzE,CAAP,CAAP;AACD;AACF;AACD,WAAOiD,GAAP;AACD;;AAED,WAAS0B,OAAT,CAAiBF,MAAjB,EAAyB;AACvB,QAAIG,kBAAkBC,iBAAiBJ,MAAjB,CAAtB;AACA,QAAIG,gBAAgB3E,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,aAAO,IAAP;AACD;AACD,WAAOyE,IAAIE,eAAJ,IAAuBA,gBAAgB3E,MAA9C;AACD;;AAED,WAAS4E,gBAAT,CAA0BJ,MAA1B,EAAkC;AAChC,QAAIG,kBAAkB,EAAtB;AACA,SAAK,IAAI5E,IAAI,CAAb,EAAgBA,IAAIyE,OAAOxE,MAA3B,EAAmCD,GAAnC,EAAwC;AACtC,UAAIyE,OAAOzE,CAAP,MAAc,IAAlB,EAAwB;AACtB4E,wBAAgB1E,IAAhB,CAAqBuE,OAAOzE,CAAP,CAArB;AACD;AACF;AACD,WAAO4E,eAAP;AACD;;AAED,WAASE,GAAT,CAAaL,MAAb,EAAqB;AACnB,WAAOtE,EAAEE,GAAF,CAAMoE,MAAN,CAAP;AACD;;AAED,WAASM,GAAT,CAAaN,MAAb,EAAqB;AACnB,WAAOtE,EAAEC,GAAF,CAAMqE,MAAN,CAAP;AACD;;AAED,WAASO,MAAT,CAAgBP,MAAhB,EAAwB;AACtB,QAAIQ,SAAS9E,EAAEmC,MAAF,CAASmC,MAAT,CAAb;AACA,WAAOQ,OAAOnE,KAAKC,KAAL,CAAWkE,OAAOhF,MAAP,GAAgB,CAA3B,CAAP,CAAP;AACD;;AAED;AACA;AACA;;AAEA;;;;;;;;AAQA,WAAS4B,iBAAT,CAA2BP,SAA3B,EAAsChC,WAAtC,EAAmD;AACjD,WAAOwB,KAAKC,KAAL,CAAWO,YAAYhC,WAAvB,IAAsCA,WAA7C;AACD;;AAED,WAAS8B,UAAT,CAAoBoB,MAApB,EAA4B;AAC1B,WAAOrC,EAAEmC,MAAF,CAASE,MAAT,EAAiB,UAAU3B,KAAV,EAAiB;AACvC,aAAOA,MAAM,CAAN,CAAP;AACD,KAFM,CAAP;AAGD;;AAED;;;AAGA,WAASkC,iBAAT,CAA2BP,MAA3B,EAAmC;AACjC,QAAI0C,IAAJ,EAAUC,KAAV;;AAEA;AACA,SAAK,IAAInF,IAAIwC,OAAOvC,MAAP,GAAgB,CAA7B,EAAgCD,KAAK,CAArC,EAAwCA,GAAxC,EAA6C;AAC3C,UAAI,CAACwC,OAAOxC,CAAP,EAAU,CAAV,CAAL,EAAmB;AACjBkF,eAAOE,gBAAgB5C,MAAhB,EAAwBA,OAAOxC,CAAP,CAAxB,CAAP;AACAmF,gBAAQE,iBAAiB7C,MAAjB,EAAyBA,OAAOxC,CAAP,CAAzB,CAAR;AACA,YAAI,CAACkF,IAAL,EAAW;AACTA,iBAAOC,KAAP;AACD;AACD,YAAI,CAACA,KAAL,EAAY;AACVA,kBAAQD,IAAR;AACD;AACD1C,eAAOxC,CAAP,EAAU,CAAV,IAAesF,oBAAoB9C,OAAOxC,CAAP,EAAU,CAAV,CAApB,EAAkCkF,IAAlC,EAAwCC,KAAxC,CAAf;AACD;AACF;AACD,WAAO3C,MAAP;AACD;;AAED,WAAS8C,mBAAT,CAA6BhE,SAA7B,EAAwC4D,IAAxC,EAA8CC,KAA9C,EAAqD;AACnD,QAAID,KAAK,CAAL,MAAYC,MAAM,CAAN,CAAhB,EAA0B;AACxB,aAAO,CAACD,KAAK,CAAL,IAAUC,MAAM,CAAN,CAAX,IAAuB,CAA9B;AACD,KAFD,MAEO;AACL,aAAQD,KAAK,CAAL,IAAU,CAACC,MAAM,CAAN,IAAWD,KAAK,CAAL,CAAZ,KAAwBC,MAAM,CAAN,IAAWD,KAAK,CAAL,CAAnC,KAA+C5D,YAAY4D,KAAK,CAAL,CAA3D,CAAlB;AACD;AACF;;AAED,WAASG,gBAAT,CAA0B7C,MAA1B,EAAkC3B,KAAlC,EAAyC;AACvC,QAAI0E,cAAcpF,EAAEqF,OAAF,CAAUhD,MAAV,EAAkB3B,KAAlB,CAAlB;AACA,QAAI4E,YAAJ;AACA,SAAK,IAAIzF,IAAIuF,WAAb,EAA0BvF,IAAIwC,OAAOvC,MAArC,EAA6CD,GAA7C,EAAkD;AAChD,UAAIwC,OAAOxC,CAAP,EAAU,CAAV,MAAiB,IAArB,EAA2B;AACzB,eAAOwC,OAAOxC,CAAP,CAAP;AACD;AACF;AACD,WAAOyF,YAAP;AACD;;AAED,WAASL,eAAT,CAAyB5C,MAAzB,EAAiC3B,KAAjC,EAAwC;AACtC,QAAI0E,cAAcpF,EAAEqF,OAAF,CAAUhD,MAAV,EAAkB3B,KAAlB,CAAlB;AACA,QAAI6E,WAAJ;AACA,SAAK,IAAI1F,IAAIuF,WAAb,EAA0BvF,IAAI,CAA9B,EAAiCA,GAAjC,EAAsC;AACpC,UAAIwC,OAAOxC,CAAP,EAAU,CAAV,MAAiB,IAArB,EAA2B;AACzB,eAAOwC,OAAOxC,CAAP,CAAP;AACD;AACF;AACD,WAAO0F,WAAP;AACD;;AAED;AACA;AACA;;;;AAlZOvF,O;;AACKO,W;;;AAENsB,iB,GAAc,C;AACdF,qB,GAAkB,C;AAgZlB6D,uB,GAAoB;AACxBxG,8BADwB;AAExBoB,wBAFwB;AAGxBiB,kCAHwB;AAIxBS,4BAJwB;AAKxBkB,oBALwB;AAMxBE,8BANwB;AAOxBC,oBAPwB;AAQxBG,kBARwB;AASxBI,gDATwB;AAUxBM,0CAVwB;AAWxBO,gBAXwB;AAYxBF,oBAZwB;AAaxBG,wBAbwB;AAcxBG,gBAdwB;AAexBC,gBAfwB;AAgBxBC;AAhBwB,O;;yBAmBXW,iB","file":"timeseries.js","sourcesContent":["/**\n * timeseries.js\n *\n * This module contains functions for working with time series.\n *\n * datapoints - array of points where point is [value, timestamp]. In almost all cases (if other wasn't\n * explicitly said) we assume datapoints are sorted by timestamp. Timestamp is the number of milliseconds\n * since 1 January 1970 00:00:00 UTC.\n *\n */\n\nimport _ from 'lodash';\nimport * as utils from './utils';\n\nconst POINT_VALUE = 0;\nconst POINT_TIMESTAMP = 1;\n\n/**\n * Downsample time series by using given function (avg, min, max).\n */\nfunction downsample(datapoints, time_to, ms_interval, func) {\n  var downsampledSeries = [];\n  var timeWindow = {\n    from: time_to * 1000 - ms_interval,\n    to: time_to * 1000\n  };\n\n  var points_sum = 0;\n  var points_num = 0;\n  var value_avg = 0;\n  var frame = [];\n\n  for (var i = datapoints.length - 1; i >= 0; i -= 1) {\n    if (timeWindow.from < datapoints[i][1] && datapoints[i][1] <= timeWindow.to) {\n      points_sum += datapoints[i][0];\n      points_num++;\n      frame.push(datapoints[i][0]);\n    }\n    else {\n      value_avg = points_num ? points_sum / points_num : 0;\n\n      if (func === \"max\") {\n        downsampledSeries.push([_.max(frame), timeWindow.to]);\n      }\n      else if (func === \"min\") {\n        downsampledSeries.push([_.min(frame), timeWindow.to]);\n      }\n\n      // avg by default\n      else {\n        downsampledSeries.push([value_avg, timeWindow.to]);\n      }\n\n      // Shift time window\n      timeWindow.to = timeWindow.from;\n      timeWindow.from -= ms_interval;\n\n      points_sum = 0;\n      points_num = 0;\n      frame = [];\n\n      // Process point again\n      i++;\n    }\n  }\n  return downsampledSeries.reverse();\n}\n\n/**\n * Group points by given time interval\n * datapoints: [[<value>, <unixtime>], ...]\n */\nfunction groupBy(datapoints, interval, groupByCallback) {\n  var ms_interval = utils.parseInterval(interval);\n\n  // Calculate frame timestamps\n  var frames = _.groupBy(datapoints, function (point) {\n    // Calculate time for group of points\n    return Math.floor(point[1] / ms_interval) * ms_interval;\n  });\n\n  // frame: { '<unixtime>': [[<value>, <unixtime>], ...] }\n  // return [{ '<unixtime>': <value> }, { '<unixtime>': <value> }, ...]\n  var grouped = _.mapValues(frames, function (frame) {\n    var points = _.map(frame, function (point) {\n      return point[0];\n    });\n    return groupByCallback(points);\n  });\n\n  // Convert points to Grafana format\n  return sortByTime(_.map(grouped, function (value, timestamp) {\n    return [Number(value), Number(timestamp)];\n  }));\n}\n\nfunction groupBy_perf(datapoints, interval, groupByCallback) {\n  let ms_interval = utils.parseInterval(interval);\n  let grouped_series = [];\n  let frame_values = [];\n  let frame_value;\n  let frame_ts = datapoints.length ? getPointTimeFrame(datapoints[0][POINT_TIMESTAMP], ms_interval) : 0;\n  let point_frame_ts = frame_ts;\n  let point;\n\n  for (let i=0; i < datapoints.length; i++) {\n    point = datapoints[i];\n    point_frame_ts = getPointTimeFrame(point[POINT_TIMESTAMP], ms_interval);\n    if (point_frame_ts === frame_ts) {\n      frame_values.push(point[POINT_VALUE]);\n    } else if (point_frame_ts > frame_ts) {\n      frame_value = groupByCallback(frame_values);\n      grouped_series.push([frame_value, frame_ts]);\n\n      // Move frame window to next non-empty interval and fill empty by null\n      frame_ts += ms_interval;\n      while (frame_ts < point_frame_ts) {\n        grouped_series.push([null, frame_ts]);\n        frame_ts += ms_interval;\n      }\n      frame_values = [point[POINT_VALUE]];\n    }\n  }\n\n  frame_value = groupByCallback(frame_values);\n  grouped_series.push([frame_value, frame_ts]);\n\n  return grouped_series;\n}\n\n/**\n * Summarize set of time series into one.\n * @param {datapoints[]} timeseries array of time series\n */\nfunction sumSeries(timeseries) {\n\n  // Calculate new points for interpolation\n  var new_timestamps = _.uniq(_.map(_.flatten(timeseries, true), function (point) {\n    return point[1];\n  }));\n  new_timestamps = _.sortBy(new_timestamps);\n\n  var interpolated_timeseries = _.map(timeseries, function (series) {\n    var timestamps = _.map(series, function (point) {\n      return point[1];\n    });\n    var new_points = _.map(_.difference(new_timestamps, timestamps), function (timestamp) {\n      return [null, timestamp];\n    });\n    var new_series = series.concat(new_points);\n    return sortByTime(new_series);\n  });\n\n  _.each(interpolated_timeseries, interpolateSeries);\n\n  var new_timeseries = [];\n  var sum;\n  for (var i = new_timestamps.length - 1; i >= 0; i--) {\n    sum = 0;\n    for (var j = interpolated_timeseries.length - 1; j >= 0; j--) {\n      sum += interpolated_timeseries[j][i][0];\n    }\n    new_timeseries.push([sum, new_timestamps[i]]);\n  }\n\n  return sortByTime(new_timeseries);\n}\n\nfunction scale(datapoints, factor) {\n  return _.map(datapoints, point => {\n    return [\n      point[0] * factor,\n      point[1]\n    ];\n  });\n}\n\nfunction scale_perf(datapoints, factor) {\n  for (let i = 0; i < datapoints.length; i++) {\n    datapoints[i] = [\n      datapoints[i][POINT_VALUE] * factor,\n      datapoints[i][POINT_TIMESTAMP]\n    ];\n  }\n\n  return datapoints;\n}\n\n/**\n * Simple delta. Calculate value delta between points.\n * @param {*} datapoints\n */\nfunction delta(datapoints) {\n  let newSeries = [];\n  let deltaValue;\n  for (var i = 1; i < datapoints.length; i++) {\n    deltaValue = datapoints[i][0] - datapoints[i - 1][0];\n    newSeries.push([deltaValue, datapoints[i][1]]);\n  }\n  return newSeries;\n}\n\n/**\n * Calculates rate per second. Resistant to counter reset.\n * @param {*} datapoints\n */\nfunction rate(datapoints) {\n  let newSeries = [];\n  let point, point_prev;\n  let valueDelta = 0;\n  let timeDelta = 0;\n  for (let i = 1; i < datapoints.length; i++) {\n    point = datapoints[i];\n    point_prev = datapoints[i - 1];\n\n    // Convert ms to seconds\n    timeDelta = (point[POINT_TIMESTAMP] - point_prev[POINT_TIMESTAMP]) / 1000;\n\n    // Handle counter reset - use previous value\n    if (point[POINT_VALUE] >= point_prev[POINT_VALUE]) {\n      valueDelta = (point[POINT_VALUE] - point_prev[POINT_VALUE]) / timeDelta;\n    }\n\n    newSeries.push([valueDelta, point[POINT_TIMESTAMP]]);\n  }\n  return newSeries;\n}\n\nfunction simpleMovingAverage(datapoints, n) {\n  let sma = [];\n  let w_sum;\n  let w_avg = null;\n  let w_count = 0;\n\n  // Initial window\n  for (let j = n; j > 0; j--) {\n    if (datapoints[n - j][POINT_VALUE] !== null) {\n      w_avg += datapoints[n - j][POINT_VALUE];\n      w_count++;\n    }\n  }\n  if (w_count > 0) {\n    w_avg = w_avg / w_count;\n  } else {\n    w_avg = null;\n  }\n  sma.push([w_avg, datapoints[n - 1][POINT_TIMESTAMP]]);\n\n  for (let i = n; i < datapoints.length; i++) {\n    // Insert next value\n    if (datapoints[i][POINT_VALUE] !== null) {\n      w_sum = w_avg * w_count;\n      w_avg = (w_sum + datapoints[i][POINT_VALUE]) / (w_count + 1);\n      w_count++;\n    }\n    // Remove left side point\n    if (datapoints[i - n][POINT_VALUE] !== null) {\n      w_sum = w_avg * w_count;\n      if (w_count > 1) {\n        w_avg = (w_sum - datapoints[i - n][POINT_VALUE]) / (w_count - 1);\n        w_count--;\n      } else {\n        w_avg = null;\n        w_count = 0;\n      }\n    }\n    sma.push([w_avg, datapoints[i][POINT_TIMESTAMP]]);\n  }\n  return sma;\n}\n\nfunction expMovingAverage(datapoints, a) {\n  // Calculate a from window size\n  if (a > 1) {\n    a = 2 / (a + 1);\n  }\n  let ema = [datapoints[0]];\n  let ema_prev = datapoints[0][POINT_VALUE];\n  let ema_cur;\n  for (let i = 1; i < datapoints.length; i++) {\n    if (datapoints[i][POINT_VALUE] !== null) {\n      ema_cur = a * datapoints[i][POINT_VALUE] + (1 - a) * ema_prev;\n      ema_prev = ema_cur;\n      ema.push([ema_cur, datapoints[i][POINT_TIMESTAMP]]);\n    } else {\n      ema.push([null, datapoints[i][POINT_TIMESTAMP]]);\n    }\n  }\n  return ema;\n}\n\nfunction COUNT(values) {\n  return values.length;\n}\n\nfunction SUM(values) {\n  var sum = null;\n  for (let i = 0; i < values.length; i++) {\n    if (values[i] !== null) {\n      sum += values[i];\n    }\n  }\n  return sum;\n}\n\nfunction AVERAGE(values) {\n  let values_non_null = getNonNullValues(values);\n  if (values_non_null.length === 0) {\n    return null;\n  }\n  return SUM(values_non_null) / values_non_null.length;\n}\n\nfunction getNonNullValues(values) {\n  let values_non_null = [];\n  for (let i = 0; i < values.length; i++) {\n    if (values[i] !== null) {\n      values_non_null.push(values[i]);\n    }\n  }\n  return values_non_null;\n}\n\nfunction MIN(values) {\n  return _.min(values);\n}\n\nfunction MAX(values) {\n  return _.max(values);\n}\n\nfunction MEDIAN(values) {\n  var sorted = _.sortBy(values);\n  return sorted[Math.floor(sorted.length / 2)];\n}\n\n///////////////////////\n// Utility functions //\n///////////////////////\n\n/**\n * For given point calculate corresponding time frame.\n *\n * |__*_|_*__|___*| -> |*___|*___|*___|\n *\n * @param {*} timestamp\n * @param {*} ms_interval\n */\nfunction getPointTimeFrame(timestamp, ms_interval) {\n  return Math.floor(timestamp / ms_interval) * ms_interval;\n}\n\nfunction sortByTime(series) {\n  return _.sortBy(series, function (point) {\n    return point[1];\n  });\n}\n\n/**\n * Interpolate series with gaps\n */\nfunction interpolateSeries(series) {\n  var left, right;\n\n  // Interpolate series\n  for (var i = series.length - 1; i >= 0; i--) {\n    if (!series[i][0]) {\n      left = findNearestLeft(series, series[i]);\n      right = findNearestRight(series, series[i]);\n      if (!left) {\n        left = right;\n      }\n      if (!right) {\n        right = left;\n      }\n      series[i][0] = linearInterpolation(series[i][1], left, right);\n    }\n  }\n  return series;\n}\n\nfunction linearInterpolation(timestamp, left, right) {\n  if (left[1] === right[1]) {\n    return (left[0] + right[0]) / 2;\n  } else {\n    return (left[0] + (right[0] - left[0]) / (right[1] - left[1]) * (timestamp - left[1]));\n  }\n}\n\nfunction findNearestRight(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestRight;\n  for (var i = point_index; i < series.length; i++) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return nearestRight;\n}\n\nfunction findNearestLeft(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestLeft;\n  for (var i = point_index; i > 0; i--) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return nearestLeft;\n}\n\n////////////\n// Export //\n////////////\n\nconst exportedFunctions = {\n  downsample,\n  groupBy,\n  groupBy_perf,\n  sumSeries,\n  scale,\n  scale_perf,\n  delta,\n  rate,\n  simpleMovingAverage,\n  expMovingAverage,\n  SUM,\n  COUNT,\n  AVERAGE,\n  MIN,\n  MAX,\n  MEDIAN\n};\n\nexport default exportedFunctions;\n"]}