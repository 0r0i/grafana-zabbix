{"version":3,"sources":["../../src/datasource-zabbix/timeseries.js"],"names":["downsample","datapoints","time_to","ms_interval","func","downsampledSeries","timeWindow","from","to","points_sum","points_num","value_avg","frame","i","length","push","_","max","min","reverse","groupBy","interval","groupByCallback","utils","parseInterval","frames","point","Math","floor","grouped","mapValues","points","map","sortByTime","value","timestamp","Number","sumSeries","timeseries","new_timestamps","uniq","flatten","sortBy","interpolated_timeseries","series","timestamps","new_points","difference","new_series","concat","each","interpolateSeries","new_timeseries","sum","j","scale","factor","delta","newSeries","deltaValue","SUM","values","COUNT","AVERAGE","MIN","MAX","MEDIAN","sorted","left","right","findNearestLeft","findNearestRight","linearInterpolation","point_index","indexOf","nearestRight","nearestLeft","exportedFunctions"],"mappings":"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","file":"timeseries.js","sourcesContent":["/**\n * timeseries.js\n *\n * This module contains functions for working with time series.\n */\n\nimport _ from 'lodash';\nimport * as utils from './utils';\n\n/**\n * Downsample time series by using given function (avg, min, max).\n */\nfunction downsample(datapoints, time_to, ms_interval, func) {\n  var downsampledSeries = [];\n  var timeWindow = {\n    from: time_to * 1000 - ms_interval,\n    to: time_to * 1000\n  };\n\n  var points_sum = 0;\n  var points_num = 0;\n  var value_avg = 0;\n  var frame = [];\n\n  for (var i = datapoints.length - 1; i >= 0; i -= 1) {\n    if (timeWindow.from < datapoints[i][1] && datapoints[i][1] <= timeWindow.to) {\n      points_sum += datapoints[i][0];\n      points_num++;\n      frame.push(datapoints[i][0]);\n    }\n    else {\n      value_avg = points_num ? points_sum / points_num : 0;\n\n      if (func === \"max\") {\n        downsampledSeries.push([_.max(frame), timeWindow.to]);\n      }\n      else if (func === \"min\") {\n        downsampledSeries.push([_.min(frame), timeWindow.to]);\n      }\n\n      // avg by default\n      else {\n        downsampledSeries.push([value_avg, timeWindow.to]);\n      }\n\n      // Shift time window\n      timeWindow.to = timeWindow.from;\n      timeWindow.from -= ms_interval;\n\n      points_sum = 0;\n      points_num = 0;\n      frame = [];\n\n      // Process point again\n      i++;\n    }\n  }\n  return downsampledSeries.reverse();\n}\n\n/**\n * Group points by given time interval\n * datapoints: [[<value>, <unixtime>], ...]\n */\nfunction groupBy(interval, groupByCallback, datapoints) {\n  var ms_interval = utils.parseInterval(interval);\n\n  // Calculate frame timestamps\n  var frames = _.groupBy(datapoints, function (point) {\n    // Calculate time for group of points\n    return Math.floor(point[1] / ms_interval) * ms_interval;\n  });\n\n  // frame: { '<unixtime>': [[<value>, <unixtime>], ...] }\n  // return [{ '<unixtime>': <value> }, { '<unixtime>': <value> }, ...]\n  var grouped = _.mapValues(frames, function (frame) {\n    var points = _.map(frame, function (point) {\n      return point[0];\n    });\n    return groupByCallback(points);\n  });\n\n  // Convert points to Grafana format\n  return sortByTime(_.map(grouped, function (value, timestamp) {\n    return [Number(value), Number(timestamp)];\n  }));\n}\n\n/**\n * Summarize set of time series into one.\n * @param {object[]} timeseries\n */\nfunction sumSeries(timeseries) {\n\n  // Calculate new points for interpolation\n  var new_timestamps = _.uniq(_.map(_.flatten(timeseries, true), function (point) {\n    return point[1];\n  }));\n  new_timestamps = _.sortBy(new_timestamps);\n\n  var interpolated_timeseries = _.map(timeseries, function (series) {\n    var timestamps = _.map(series, function (point) {\n      return point[1];\n    });\n    var new_points = _.map(_.difference(new_timestamps, timestamps), function (timestamp) {\n      return [null, timestamp];\n    });\n    var new_series = series.concat(new_points);\n    return sortByTime(new_series);\n  });\n\n  _.each(interpolated_timeseries, interpolateSeries);\n\n  var new_timeseries = [];\n  var sum;\n  for (var i = new_timestamps.length - 1; i >= 0; i--) {\n    sum = 0;\n    for (var j = interpolated_timeseries.length - 1; j >= 0; j--) {\n      sum += interpolated_timeseries[j][i][0];\n    }\n    new_timeseries.push([sum, new_timestamps[i]]);\n  }\n\n  return sortByTime(new_timeseries);\n}\n\nfunction scale(factor, datapoints) {\n  return _.map(datapoints, point => {\n    return [\n      point[0] * factor,\n      point[1]\n    ];\n  });\n}\n\nfunction delta(datapoints) {\n  let newSeries = [];\n  let deltaValue;\n  for (var i = 1; i < datapoints.length; i++) {\n    deltaValue = datapoints[i][0] - datapoints[i - 1][0];\n    newSeries.push([deltaValue, datapoints[i][1]]);\n  }\n  return newSeries;\n}\n\nfunction SUM(values) {\n  var sum = 0;\n  _.each(values, function (value) {\n    sum += value;\n  });\n  return sum;\n}\n\nfunction COUNT(values) {\n  return values.length;\n}\n\nfunction AVERAGE(values) {\n  var sum = 0;\n  _.each(values, function (value) {\n    sum += value;\n  });\n  return sum / values.length;\n}\n\nfunction MIN(values) {\n  return _.min(values);\n}\n\nfunction MAX(values) {\n  return _.max(values);\n}\n\nfunction MEDIAN(values) {\n  var sorted = _.sortBy(values);\n  return sorted[Math.floor(sorted.length / 2)];\n}\n\n///////////////////////\n// Utility functions //\n///////////////////////\n\nfunction sortByTime(series) {\n  return _.sortBy(series, function (point) {\n    return point[1];\n  });\n}\n\n/**\n * Interpolate series with gaps\n */\nfunction interpolateSeries(series) {\n  var left, right;\n\n  // Interpolate series\n  for (var i = series.length - 1; i >= 0; i--) {\n    if (!series[i][0]) {\n      left = findNearestLeft(series, series[i]);\n      right = findNearestRight(series, series[i]);\n      if (!left) {\n        left = right;\n      }\n      if (!right) {\n        right = left;\n      }\n      series[i][0] = linearInterpolation(series[i][1], left, right);\n    }\n  }\n  return series;\n}\n\nfunction linearInterpolation(timestamp, left, right) {\n  if (left[1] === right[1]) {\n    return (left[0] + right[0]) / 2;\n  } else {\n    return (left[0] + (right[0] - left[0]) / (right[1] - left[1]) * (timestamp - left[1]));\n  }\n}\n\nfunction findNearestRight(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestRight;\n  for (var i = point_index; i < series.length; i++) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return nearestRight;\n}\n\nfunction findNearestLeft(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestLeft;\n  for (var i = point_index; i > 0; i--) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return nearestLeft;\n}\n\n////////////\n// Export //\n////////////\n\nconst exportedFunctions = {\n  downsample,\n  groupBy,\n  sumSeries,\n  scale,\n  delta,\n  SUM,\n  COUNT,\n  AVERAGE,\n  MIN,\n  MAX,\n  MEDIAN\n};\n\nexport default exportedFunctions;\n"]}