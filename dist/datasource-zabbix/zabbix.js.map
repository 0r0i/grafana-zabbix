{"version":3,"sources":["../../src/datasource-zabbix/zabbix.js"],"names":["ZabbixFactory","zabbixAPIService","ZabbixCachingProxy","ZabbixDBConnector","Zabbix","url","options","username","password","basicAuth","withCredentials","cacheTTL","enableDirectDBConnection","sqlDatasourceId","ZabbixAPI","zabbixAPI","dbConnector","cacheOptions","enabled","ttl","cachingProxy","getHistory","bind","getMacros","getHistoryDB","getTrendsDB","getTrend","getEvents","getAlerts","getAcknowledges","getITService","getSLA","getVersion","login","target","parts","filters","_","map","p","filter","getItems","getGroups","groupFilter","getAllGroups","then","findByFilter","groups","groupids","getHosts","hostFilter","getAllHosts","hosts","hostids","getApps","appFilter","filterByQuery","apps","appFilterEmpty","undefined","itemtype","appids","showDisabledItems","items","expandUserMacro","getHostIds","forEach","utils","containsMacro","item","name","replaceMacro","macros","itemFilter","getAllItems","promises","Promise","all","filteredGroups","results","filteredHosts","filteredApps","query","applicationids","flatten","getTriggers","findByName","list","finded","find","filterByName","filterByRegex","regex","filterPattern","buildRegex","zbx_obj","test","isRegex","hostIds","uniq","angular","module","factory"],"mappings":"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","file":"zabbix.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport * as utils from './utils';\nimport './zabbixAPI.service.js';\nimport './zabbixCachingProxy.service.js';\nimport './zabbixDBConnector';\n\n// Use factory() instead service() for multiple data sources support.\n// Each Zabbix data source instance should initialize its own API instance.\n\n/** @ngInject */\nfunction ZabbixFactory(zabbixAPIService, ZabbixCachingProxy, ZabbixDBConnector) {\n\n  class Zabbix {\n    constructor(url, options) {\n      let {\n        username, password, basicAuth, withCredentials, cacheTTL,\n        enableDirectDBConnection, sqlDatasourceId\n      } = options;\n\n      // Initialize Zabbix API\n      var ZabbixAPI = zabbixAPIService;\n      this.zabbixAPI = new ZabbixAPI(url, username, password, basicAuth, withCredentials);\n\n      if (enableDirectDBConnection) {\n        this.dbConnector = new ZabbixDBConnector(sqlDatasourceId);\n      }\n\n      // Initialize caching proxy for requests\n      let cacheOptions = {\n        enabled: true,\n        ttl: cacheTTL\n      };\n      this.cachingProxy = new ZabbixCachingProxy(this.zabbixAPI, this.dbConnector, cacheOptions);\n\n      // Proxy methods\n      this.getHistory = this.cachingProxy.getHistory.bind(this.cachingProxy);\n      this.getMacros = this.cachingProxy.getMacros.bind(this.cachingProxy);\n\n      if (enableDirectDBConnection) {\n        this.getHistoryDB = this.cachingProxy.getHistoryDB.bind(this.cachingProxy);\n        this.getTrendsDB = this.cachingProxy.getTrendsDB.bind(this.cachingProxy);\n      }\n\n      this.getTrend = this.zabbixAPI.getTrend.bind(this.zabbixAPI);\n      this.getEvents = this.zabbixAPI.getEvents.bind(this.zabbixAPI);\n      this.getAlerts = this.zabbixAPI.getAlerts.bind(this.zabbixAPI);\n      this.getAcknowledges = this.zabbixAPI.getAcknowledges.bind(this.zabbixAPI);\n      this.getITService = this.zabbixAPI.getITService.bind(this.zabbixAPI);\n      this.getSLA = this.zabbixAPI.getSLA.bind(this.zabbixAPI);\n      this.getVersion = this.zabbixAPI.getVersion.bind(this.zabbixAPI);\n      this.login = this.zabbixAPI.login.bind(this.zabbixAPI);\n    }\n\n    getItemsFromTarget(target, options) {\n      let parts = ['group', 'host', 'application', 'item'];\n      let filters = _.map(parts, p => target[p].filter);\n      return this.getItems(...filters, options);\n    }\n\n    getAllGroups() {\n      return this.cachingProxy.getGroups();\n    }\n\n    getGroups(groupFilter) {\n      return this.getAllGroups()\n      .then(groups => findByFilter(groups, groupFilter));\n    }\n\n    /**\n     * Get list of host belonging to given groups.\n     */\n    getAllHosts(groupFilter) {\n      return this.getGroups(groupFilter)\n      .then(groups => {\n        let groupids = _.map(groups, 'groupid');\n        return this.cachingProxy.getHosts(groupids);\n      });\n    }\n\n    getHosts(groupFilter, hostFilter) {\n      return this.getAllHosts(groupFilter)\n      .then(hosts => findByFilter(hosts, hostFilter));\n    }\n\n    /**\n     * Get list of applications belonging to given groups and hosts.\n     */\n    getAllApps(groupFilter, hostFilter) {\n      return this.getHosts(groupFilter, hostFilter)\n      .then(hosts => {\n        let hostids = _.map(hosts, 'hostid');\n        return this.cachingProxy.getApps(hostids);\n      });\n    }\n\n    getApps(groupFilter, hostFilter, appFilter) {\n      return this.getHosts(groupFilter, hostFilter)\n      .then(hosts => {\n        let hostids = _.map(hosts, 'hostid');\n        if (appFilter) {\n          return this.cachingProxy.getApps(hostids)\n          .then(apps => filterByQuery(apps, appFilter));\n        } else {\n          return {\n            appFilterEmpty: true,\n            hostids: hostids\n          };\n        }\n      });\n    }\n\n    getAllItems(groupFilter, hostFilter, appFilter, options = {}) {\n      return this.getApps(groupFilter, hostFilter, appFilter)\n      .then(apps => {\n        if (apps.appFilterEmpty) {\n          return this.cachingProxy.getItems(apps.hostids, undefined, options.itemtype);\n        } else {\n          let appids = _.map(apps, 'applicationid');\n          return this.cachingProxy.getItems(undefined, appids, options.itemtype);\n        }\n      })\n      .then(items => {\n        if (!options.showDisabledItems) {\n          items = _.filter(items, {'status': '0'});\n        }\n\n        return items;\n      })\n      .then(this.expandUserMacro.bind(this));\n    }\n\n    expandUserMacro(items) {\n      let hostids = getHostIds(items);\n      return this.getMacros(hostids)\n      .then(macros => {\n        _.forEach(items, item => {\n          if (utils.containsMacro(item.name)) {\n            item.name = utils.replaceMacro(item, macros);\n          }\n        });\n        return items;\n      });\n    }\n\n    getItems(groupFilter, hostFilter, appFilter, itemFilter, options = {}) {\n      return this.getAllItems(groupFilter, hostFilter, appFilter, options)\n      .then(items => filterByQuery(items, itemFilter));\n    }\n\n    /**\n     * Build query - convert target filters to array of Zabbix items\n     */\n    getTriggers(groupFilter, hostFilter, appFilter, options) {\n      let promises = [\n        this.getGroups(groupFilter),\n        this.getHosts(groupFilter, hostFilter),\n        this.getApps(groupFilter, hostFilter, appFilter)\n      ];\n\n      return Promise.all(promises)\n      .then(results => {\n        let filteredGroups = results[0];\n        let filteredHosts = results[1];\n        let filteredApps = results[2];\n        let query = {};\n\n        if (appFilter) {\n          query.applicationids = _.flatten(_.map(filteredApps, 'applicationid'));\n        }\n        if (hostFilter) {\n          query.hostids = _.map(filteredHosts, 'hostid');\n        }\n        if (groupFilter) {\n          query.groupids = _.map(filteredGroups, 'groupid');\n        }\n\n        return query;\n      }).then(query => {\n        return this.zabbixAPI.getTriggers(query.groupids, query.hostids, query.applicationids, options);\n      });\n    }\n  }\n\n  return Zabbix;\n}\n\nangular\n  .module('grafana.services')\n  .factory('Zabbix', ZabbixFactory);\n\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Find group, host, app or item by given name.\n * @param  list list of groups, apps or other\n * @param  name visible name\n * @return      array with finded element or empty array\n */\nfunction findByName(list, name) {\n  var finded = _.find(list, {'name': name});\n  if (finded) {\n    return [finded];\n  } else {\n    return [];\n  }\n}\n\n/**\n * Different hosts can contains applications and items with same name.\n * For this reason use _.filter, which return all elements instead _.find,\n * which return only first finded.\n * @param  {[type]} list list of elements\n * @param  {[type]} name app name\n * @return {[type]}      array with finded element or empty array\n */\nfunction filterByName(list, name) {\n  var finded = _.filter(list, {'name': name});\n  if (finded) {\n    return finded;\n  } else {\n    return [];\n  }\n}\n\nfunction filterByRegex(list, regex) {\n  var filterPattern = utils.buildRegex(regex);\n  return _.filter(list, function (zbx_obj) {\n    return filterPattern.test(zbx_obj.name);\n  });\n}\n\nfunction findByFilter(list, filter) {\n  if (utils.isRegex(filter)) {\n    return filterByRegex(list, filter);\n  } else {\n    return findByName(list, filter);\n  }\n}\n\nfunction filterByQuery(list, filter) {\n  if (utils.isRegex(filter)) {\n    return filterByRegex(list, filter);\n  } else {\n    return filterByName(list, filter);\n  }\n}\n\nfunction getHostIds(items) {\n  let hostIds = _.map(items, item => {\n    return _.map(item.hosts, 'hostid');\n  });\n  return _.uniq(_.flatten(hostIds));\n}\n"]}