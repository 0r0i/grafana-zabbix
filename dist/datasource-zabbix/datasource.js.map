{"version":3,"sources":["../../src/datasource-zabbix/datasource.js"],"names":["bindFunctionDefs","functionDefs","category","aggregationFunctions","_","map","metricFunctions","getCategories","aggFuncDefs","filter","func","includes","def","name","funcInstance","createFuncInstance","params","bindFunction","dataProcessor","downsampleSeries","timeseries_data","options","timeseries","datapoints","length","maxDataPoints","groupBy","interval","AVERAGE","formatMetric","metricObj","text","expandable","zabbixTemplateFormat","value","utils","escapeRegex","escapedValues","join","replaceTemplateVars","templateSrv","target","scopedVars","replacedTarget","replace","isRegex","extractText","str","pattern","useCaptureGroups","extractPattern","RegExp","extractedValue","exec","sequence","funcsArray","result","i","call","filterEnabledTargets","targets","hide","group","host","item","getTriggerThreshold","expression","thresholdPattern","finded_thresholds","match","threshold","Number","dateMath","migrations","responseHandler","ZabbixAPIError","ZabbixAPIDatasource","instanceSettings","alertSrv","dashboardSrv","zabbixAlertingSrv","Zabbix","url","basicAuth","withCredentials","username","jsonData","password","trends","trendsFrom","ttl","cacheTTL","parseInterval","alertingEnabled","alerting","addThresholds","zabbix","partial","timeFrom","Math","ceil","parse","range","from","timeTo","to","useTrendsFrom","useTrends","alertQuery","then","setPanelAlertState","panelId","alert","state","removeZabbixThreshold","forEach","thresholds","setPanelThreshold","promises","cloneDeep","replaceTargetVariables","timeFunctions","functions","time_from","time_to","mode","migrate","queryNumericData","queryTextData","itservice","slaProperty","getSLA","serviceid","handleSLAResponse","slaObject","Promise","all","flatten","data","itemtype","getItemsFromTarget","getHistoryPromise","valueType","getTrendValueType","getTrend","items","handleTrends","history","getHistory","handleHistory","applyDataProcessingFunctions","catch","console","log","error","trendFunctions","trendValueFunc","find","transformFunctions","filterFunctions","aliasFunctions","dp","aggFuncNames","lastAgg","findLast","applyTimeShiftFunction","timeShiftFunc","shift","series","unShiftTimeSeries","convertHistory","point","textFilter","clock","resolve","zabbixVersion","getVersion","version","login","status","title","message","query","parts","each","split","part","push","template","zipObject","app","getItems","getApps","getHosts","getGroups","metrics","rangeRaw","annotation","showOkEvents","showTriggers","getTriggers","application","trigger","triggers","buildRegex","test","description","priority","minseverity","objectids","getEvents","indexedTriggers","keyBy","hideAcknowledged","events","event","acknowledges","tags","showHostname","hosts","formatted_acknowledges","formatAcknowledges","time","objectid","enabled_targets","getPanelItems","results","itemids","getAlerts","firedTriggers","p","param","toString","contains","indexBy"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as dateMath from 'app/core/utils/datemath';\nimport * as utils from './utils';\nimport * as migrations from './migrations';\nimport * as metricFunctions from './metricFunctions';\nimport dataProcessor from './dataProcessor';\nimport responseHandler from './responseHandler';\nimport './zabbix.js';\nimport './zabbixAlerting.service.js';\nimport {ZabbixAPIError} from './zabbixAPICore.service.js';\n\nclass ZabbixAPIDatasource {\n\n  /** @ngInject */\n  constructor(instanceSettings, templateSrv, alertSrv, dashboardSrv, zabbixAlertingSrv, Zabbix) {\n    this.templateSrv = templateSrv;\n    this.alertSrv = alertSrv;\n    this.dashboardSrv = dashboardSrv;\n    this.zabbixAlertingSrv = zabbixAlertingSrv;\n\n    // General data source settings\n    this.name             = instanceSettings.name;\n    this.url              = instanceSettings.url;\n    this.basicAuth        = instanceSettings.basicAuth;\n    this.withCredentials  = instanceSettings.withCredentials;\n\n    // Zabbix API credentials\n    this.username         = instanceSettings.jsonData.username;\n    this.password         = instanceSettings.jsonData.password;\n\n    // Use trends instead history since specified time\n    this.trends           = instanceSettings.jsonData.trends;\n    this.trendsFrom       = instanceSettings.jsonData.trendsFrom || '7d';\n\n    // Set cache update interval\n    var ttl = instanceSettings.jsonData.cacheTTL || '1h';\n    this.cacheTTL = utils.parseInterval(ttl);\n\n    // Alerting options\n    this.alertingEnabled = instanceSettings.jsonData.alerting;\n    this.addThresholds = instanceSettings.jsonData.addThresholds;\n\n    this.zabbix = new Zabbix(this.url, this.username, this.password, this.basicAuth, this.withCredentials, this.cacheTTL);\n\n    // Use custom format for template variables\n    this.replaceTemplateVars = _.partial(replaceTemplateVars, this.templateSrv);\n  }\n\n  ////////////////////////\n  // Datasource methods //\n  ////////////////////////\n\n  /**\n   * Query panel data. Calls for each panel in dashboard.\n   * @param  {Object} options   Contains time range, targets and other info.\n   * @return {Object} Grafana metrics object with timeseries data for each target.\n   */\n  query(options) {\n    let timeFrom = Math.ceil(dateMath.parse(options.range.from) / 1000);\n    let timeTo = Math.ceil(dateMath.parse(options.range.to) / 1000);\n\n    let useTrendsFrom = Math.ceil(dateMath.parse('now-' + this.trendsFrom) / 1000);\n    let useTrends = (timeFrom <= useTrendsFrom) && this.trends;\n\n    // Get alerts for current panel\n    if (this.alertingEnabled) {\n      this.alertQuery(options).then(alert => {\n        this.zabbixAlertingSrv.setPanelAlertState(options.panelId, alert.state);\n\n        this.zabbixAlertingSrv.removeZabbixThreshold(options.panelId);\n        if (this.addThresholds) {\n          _.forEach(alert.thresholds, threshold => {\n            this.zabbixAlertingSrv.setPanelThreshold(options.panelId, threshold);\n          });\n        }\n      });\n    }\n\n    // Create request for each target\n    let promises = _.map(options.targets, target => {\n      // Prevent changes of original object\n      target = _.cloneDeep(target);\n      this.replaceTargetVariables(target, options);\n\n      // Apply Time-related functions (timeShift(), etc)\n      let timeFunctions = bindFunctionDefs(target.functions, 'Time');\n      if (timeFunctions.length) {\n        const [time_from, time_to] = sequence(timeFunctions)([timeFrom, timeTo]);\n        timeFrom = time_from;\n        timeTo = time_to;\n      }\n\n      // Metrics or Text query mode\n      if (target.mode !== 1) {\n        // Migrate old targets\n        target = migrations.migrate(target);\n\n        // Don't request undefined and hidden targets\n        if (target.hide || !target.group || !target.host || !target.item) {\n          return [];\n        }\n\n        if (!target.mode || target.mode === 0) {\n          return this.queryNumericData(target, timeFrom, timeTo, useTrends);\n        } else if (target.mode === 2) {\n          return this.queryTextData(target, timeFrom, timeTo);\n        }\n      }\n\n      // IT services mode\n      else if (target.mode === 1) {\n        // Don't show undefined and hidden targets\n        if (target.hide || !target.itservice || !target.slaProperty) {\n          return [];\n        }\n\n        return this.zabbix.getSLA(target.itservice.serviceid, timeFrom, timeTo)\n        .then(slaObject => {\n          return responseHandler.handleSLAResponse(target.itservice, target.slaProperty, slaObject);\n        });\n      }\n    });\n\n    // Data for panel (all targets)\n    return Promise.all(_.flatten(promises))\n      .then(_.flatten)\n      .then(timeseries_data => {\n        return downsampleSeries(timeseries_data, options);\n      })\n      .then(data => {\n        return { data: data };\n      });\n  }\n\n  queryNumericData(target, timeFrom, timeTo, useTrends) {\n    let options = {\n      itemtype: 'num'\n    };\n    return this.zabbix.getItemsFromTarget(target, options)\n    .then(items => {\n      let getHistoryPromise;\n\n      if (useTrends) {\n        let valueType = this.getTrendValueType(target);\n        getHistoryPromise = this.zabbix.getTrend(items, timeFrom, timeTo)\n          .then(history => {\n            return responseHandler.handleTrends(history, items, valueType);\n          });\n      } else {\n        // Use history\n        getHistoryPromise = this.zabbix.getHistory(items, timeFrom, timeTo)\n          .then(history => {\n            return responseHandler.handleHistory(history, items);\n          });\n      }\n\n      return getHistoryPromise.then(timeseries_data => {\n        return this.applyDataProcessingFunctions(timeseries_data, target);\n      });\n    })\n    .catch(error => {\n      console.log(error);\n      return [];\n    });\n  }\n\n  getTrendValueType(target) {\n    // Find trendValue() function and get specified trend value\n    var trendFunctions = _.map(metricFunctions.getCategories()['Trends'], 'name');\n    var trendValueFunc = _.find(target.functions, func => {\n      return _.includes(trendFunctions, func.def.name);\n    });\n    return trendValueFunc ? trendValueFunc.params[0] : \"avg\";\n  }\n\n  applyDataProcessingFunctions(timeseries_data, target) {\n    let transformFunctions   = bindFunctionDefs(target.functions, 'Transform');\n    let aggregationFunctions = bindFunctionDefs(target.functions, 'Aggregate');\n    let filterFunctions      = bindFunctionDefs(target.functions, 'Filter');\n    let aliasFunctions       = bindFunctionDefs(target.functions, 'Alias');\n\n    // Apply transformation functions\n    timeseries_data = _.map(timeseries_data, timeseries => {\n      timeseries.datapoints = sequence(transformFunctions)(timeseries.datapoints);\n      return timeseries;\n    });\n\n    // Apply filter functions\n    if (filterFunctions.length) {\n      timeseries_data = sequence(filterFunctions)(timeseries_data);\n    }\n\n    // Apply aggregations\n    if (aggregationFunctions.length) {\n      let dp = _.map(timeseries_data, 'datapoints');\n      dp = sequence(aggregationFunctions)(dp);\n\n      let aggFuncNames = _.map(metricFunctions.getCategories()['Aggregate'], 'name');\n      let lastAgg = _.findLast(target.functions, func => {\n        return _.includes(aggFuncNames, func.def.name);\n      });\n\n      timeseries_data = [{\n        target: lastAgg.text,\n        datapoints: dp\n      }];\n    }\n\n    // Apply alias functions\n    _.forEach(timeseries_data, sequence(aliasFunctions));\n\n    // Apply Time-related functions (timeShift(), etc)\n    // Find timeShift() function and get specified trend value\n    this.applyTimeShiftFunction(timeseries_data, target);\n\n    return timeseries_data;\n  }\n\n  applyTimeShiftFunction(timeseries_data, target) {\n    // Find timeShift() function and get specified interval\n    let timeShiftFunc = _.find(target.functions, (func) => {\n      return func.def.name === 'timeShift';\n    });\n    if (timeShiftFunc) {\n      let shift = timeShiftFunc.params[0];\n      _.forEach(timeseries_data, (series) => {\n        series.datapoints = dataProcessor.unShiftTimeSeries(shift, series.datapoints);\n      });\n    }\n  }\n\n  queryTextData(target, timeFrom, timeTo) {\n    let options = {\n      itemtype: 'text'\n    };\n    return this.zabbix.getItemsFromTarget(target, options)\n      .then(items => {\n        if (items.length) {\n          return this.zabbix.getHistory(items, timeFrom, timeTo)\n            .then(history => {\n              return responseHandler.convertHistory(history, items, false, (point) => {\n                let value = point.value;\n\n                // Regex-based extractor\n                if (target.textFilter) {\n                  value = extractText(point.value, target.textFilter, target.useCaptureGroups);\n                }\n\n                return [value, point.clock * 1000];\n              });\n            });\n        } else {\n          return Promise.resolve([]);\n        }\n      });\n  }\n\n  /**\n   * Test connection to Zabbix API\n   * @return {object} Connection status and Zabbix API version\n   */\n  testDatasource() {\n    let zabbixVersion;\n    return this.zabbix.getVersion()\n    .then(version => {\n      zabbixVersion = version;\n      return this.zabbix.login();\n    })\n    .then(() => {\n      return {\n        status: \"success\",\n        title: \"Success\",\n        message: \"Zabbix API version: \" + zabbixVersion\n      };\n    })\n    .catch(error => {\n      if (error instanceof ZabbixAPIError) {\n        return {\n          status: \"error\",\n          title: error.message,\n          message: error.data\n        };\n      } else {\n        return {\n          status: \"error\",\n          title: \"Connection failed\",\n          message: \"Could not connect to given url\"\n        };\n      }\n    });\n  }\n\n  ////////////////\n  // Templating //\n  ////////////////\n\n  /**\n   * Find metrics from templated request.\n   *\n   * @param  {string} query Query from Templating\n   * @return {string}       Metric name - group, host, app or item or list\n   *                        of metrics in \"{metric1,metcic2,...,metricN}\" format.\n   */\n  metricFindQuery(query) {\n    let result;\n    let parts = [];\n\n    // Split query. Query structure: group.host.app.item\n    _.each(query.split('.'), part => {\n      part = this.replaceTemplateVars(part, {});\n\n      // Replace wildcard to regex\n      if (part === '*') {\n        part = '/.*/';\n      }\n      parts.push(part);\n    });\n    let template = _.zipObject(['group', 'host', 'app', 'item'], parts);\n\n    // Get items\n    if (parts.length === 4) {\n      // Search for all items, even it's not belong to any application\n      if (template.app === '/.*/') {\n        template.app = '';\n      }\n      result = this.zabbix.getItems(template.group, template.host, template.app, template.item);\n    } else if (parts.length === 3) {\n      // Get applications\n      result = this.zabbix.getApps(template.group, template.host, template.app);\n    } else if (parts.length === 2) {\n      // Get hosts\n      result = this.zabbix.getHosts(template.group, template.host);\n    } else if (parts.length === 1) {\n      // Get groups\n      result = this.zabbix.getGroups(template.group);\n    } else {\n      result = Promise.resolve([]);\n    }\n\n    return result.then(metrics => {\n      return _.map(metrics, formatMetric);\n    });\n  }\n\n  /////////////////\n  // Annotations //\n  /////////////////\n\n  annotationQuery(options) {\n    var timeFrom = Math.ceil(dateMath.parse(options.rangeRaw.from) / 1000);\n    var timeTo = Math.ceil(dateMath.parse(options.rangeRaw.to) / 1000);\n    var annotation = options.annotation;\n    var showOkEvents = annotation.showOkEvents ? [0, 1] : 1;\n\n    // Show all triggers\n    var showTriggers = [0, 1];\n\n    var getTriggers = this.zabbix\n      .getTriggers(this.replaceTemplateVars(annotation.group, {}),\n                   this.replaceTemplateVars(annotation.host, {}),\n                   this.replaceTemplateVars(annotation.application, {}),\n                   showTriggers);\n\n    return getTriggers.then(triggers => {\n\n      // Filter triggers by description\n      if (utils.isRegex(annotation.trigger)) {\n        triggers = _.filter(triggers, trigger => {\n          return utils.buildRegex(annotation.trigger).test(trigger.description);\n        });\n      } else if (annotation.trigger) {\n        triggers = _.filter(triggers, trigger => {\n          return trigger.description === annotation.trigger;\n        });\n      }\n\n      // Remove events below the chose severity\n      triggers = _.filter(triggers, trigger => {\n        return Number(trigger.priority) >= Number(annotation.minseverity);\n      });\n\n      var objectids = _.map(triggers, 'triggerid');\n      return this.zabbix\n        .getEvents(objectids, timeFrom, timeTo, showOkEvents)\n        .then(events => {\n          var indexedTriggers = _.keyBy(triggers, 'triggerid');\n\n          // Hide acknowledged events if option enabled\n          if (annotation.hideAcknowledged) {\n            events = _.filter(events, event => {\n              return !event.acknowledges.length;\n            });\n          }\n\n          return _.map(events, event => {\n            let tags;\n            if (annotation.showHostname) {\n              tags = _.map(event.hosts, 'name');\n            }\n\n            // Show event type (OK or Problem)\n            let title = Number(event.value) ? 'Problem' : 'OK';\n\n            let formatted_acknowledges = utils.formatAcknowledges(event.acknowledges);\n            return {\n              annotation: annotation,\n              time: event.clock * 1000,\n              title: title,\n              tags: tags,\n              text: indexedTriggers[event.objectid].description + formatted_acknowledges\n            };\n          });\n        });\n    });\n  }\n\n  /**\n   * Get triggers and its details for panel's targets\n   * Returns alert state ('ok' if no fired triggers, or 'alerting' if at least 1 trigger is fired)\n   * or empty object if no related triggers are finded.\n   */\n  alertQuery(options) {\n    let enabled_targets = filterEnabledTargets(options.targets);\n    let getPanelItems = _.map(enabled_targets, target => {\n      return this.zabbix.getItemsFromTarget(target, {itemtype: 'num'});\n    });\n\n    return Promise.all(getPanelItems)\n    .then(results => {\n      let items = _.flatten(results);\n      let itemids = _.map(items, 'itemid');\n\n      return this.zabbix.getAlerts(itemids);\n    })\n    .then(triggers => {\n      if (!triggers || triggers.length === 0) {\n        return {};\n      }\n\n      let state = 'ok';\n\n      let firedTriggers = _.filter(triggers, {value: '1'});\n      if (firedTriggers.length) {\n        state = 'alerting';\n      }\n\n      let thresholds = _.map(triggers, trigger => {\n        return getTriggerThreshold(trigger.expression);\n      });\n\n      return {\n        panelId: options.panelId,\n        state: state,\n        thresholds: thresholds\n      };\n    });\n  }\n\n  // Replace template variables\n  replaceTargetVariables(target, options) {\n    let parts = ['group', 'host', 'application', 'item'];\n    _.forEach(parts, p => {\n      if (target[p] && target[p].filter) {\n        target[p].filter = this.replaceTemplateVars(target[p].filter, options.scopedVars);\n      }\n    });\n    target.textFilter = this.replaceTemplateVars(target.textFilter, options.scopedVars);\n\n    _.forEach(target.functions, func => {\n      func.params = _.map(func.params, param => {\n        if (typeof param === 'number') {\n          return +this.templateSrv.replace(param.toString(), options.scopedVars);\n        } else {\n          return this.templateSrv.replace(param, options.scopedVars);\n        }\n      });\n    });\n  }\n\n}\n\nfunction bindFunctionDefs(functionDefs, category) {\n  var aggregationFunctions = _.map(metricFunctions.getCategories()[category], 'name');\n  var aggFuncDefs = _.filter(functionDefs, function(func) {\n    return _.includes(aggregationFunctions, func.def.name);\n  });\n\n  return _.map(aggFuncDefs, function(func) {\n    var funcInstance = metricFunctions.createFuncInstance(func.def, func.params);\n    return funcInstance.bindFunction(dataProcessor.metricFunctions);\n  });\n}\n\nfunction downsampleSeries(timeseries_data, options) {\n  return _.map(timeseries_data, timeseries => {\n    if (timeseries.datapoints.length > options.maxDataPoints) {\n      timeseries.datapoints = dataProcessor\n        .groupBy(options.interval, dataProcessor.AVERAGE, timeseries.datapoints);\n    }\n    return timeseries;\n  });\n}\n\nfunction formatMetric(metricObj) {\n  return {\n    text: metricObj.name,\n    expandable: false\n  };\n}\n\n/**\n * Custom formatter for template variables.\n * Default Grafana \"regex\" formatter returns\n * value1|value2\n * This formatter returns\n * (value1|value2)\n * This format needed for using in complex regex with\n * template variables, for example\n * /CPU $cpu_item.*time/ where $cpu_item is system,user,iowait\n */\nfunction zabbixTemplateFormat(value) {\n  if (typeof value === 'string') {\n    return utils.escapeRegex(value);\n  }\n\n  var escapedValues = _.map(value, utils.escapeRegex);\n  return '(' + escapedValues.join('|') + ')';\n}\n\n/**\n * If template variables are used in request, replace it using regex format\n * and wrap with '/' for proper multi-value work. Example:\n * $variable selected as a, b, c\n * We use filter $variable\n * $variable    -> a|b|c    -> /a|b|c/\n * /$variable/  -> /a|b|c/  -> /a|b|c/\n */\nfunction replaceTemplateVars(templateSrv, target, scopedVars) {\n  var replacedTarget = templateSrv.replace(target, scopedVars, zabbixTemplateFormat);\n  if (target !== replacedTarget && !utils.isRegex(replacedTarget)) {\n    replacedTarget = '/^' + replacedTarget + '$/';\n  }\n  return replacedTarget;\n}\n\nfunction extractText(str, pattern, useCaptureGroups) {\n  let extractPattern = new RegExp(pattern);\n  let extractedValue = extractPattern.exec(str);\n  if (extractedValue) {\n    if (useCaptureGroups) {\n      extractedValue = extractedValue[1];\n    } else {\n      extractedValue = extractedValue[0];\n    }\n  }\n  return extractedValue;\n}\n\n// Apply function one by one:\n// sequence([a(), b(), c()]) = c(b(a()));\nfunction sequence(funcsArray) {\n  return function(result) {\n    for (var i = 0; i < funcsArray.length; i++) {\n      result = funcsArray[i].call(this, result);\n    }\n    return result;\n  };\n}\n\nfunction filterEnabledTargets(targets) {\n  return _.filter(targets, target => {\n    return !(target.hide || !target.group || !target.host || !target.item);\n  });\n}\n\nfunction getTriggerThreshold(expression) {\n  let thresholdPattern = /.*[<>]([\\d\\.]+)/;\n  let finded_thresholds = expression.match(thresholdPattern);\n  if (finded_thresholds && finded_thresholds.length >= 2) {\n    let threshold = finded_thresholds[1];\n    threshold = Number(threshold);\n    return threshold;\n  } else {\n    return null;\n  }\n}\n\nexport {ZabbixAPIDatasource, zabbixTemplateFormat};\n\n// Fix for backward compatibility with lodash 2.4\nif (!_.includes) {_.includes = _.contains;}\nif (!_.keyBy) {_.keyBy = _.indexBy;}\n"]}