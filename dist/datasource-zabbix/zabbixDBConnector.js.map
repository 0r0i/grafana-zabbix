{"version":3,"sources":["../../src/datasource-zabbix/zabbixDBConnector.js"],"names":["ZabbixDBConnectorFactory","datasourceSrv","backendSrv","ZabbixDBConnector","sqlDataSourceId","loadSQLDataSource","datasourceId","ds","_","find","getAll","loadDatasource","name","then","console","log","Promise","reject","query","queryDef","refId","format","rawSql","datasourceRequest","url","method","data","queries","results","response","head","tables","angular","module","factory"],"mappings":";;;;;;;;;;;;;AAGA;AACA,WAASA,wBAAT,CAAkCC,aAAlC,EAAiDC,UAAjD,EAA6D;AAAA,QAErDC,iBAFqD;AAIzD,iCAAYC,eAAZ,EAA6B;AAAA;;AAC3B,aAAKA,eAAL,GAAuBA,eAAvB;;AAEA;AACA,aAAKC,iBAAL,CAAuBD,eAAvB;AACD;;AATwD;AAAA;AAAA,0CAWvCE,YAXuC,EAWzB;AAC9B,cAAIC,KAAKC,EAAEC,IAAF,CAAOR,cAAcS,MAAd,EAAP,EAA+B,EAAC,MAAMJ,YAAP,EAA/B,CAAT;AACA,cAAIC,EAAJ,EAAQ;AACN,mBAAON,cAAcU,cAAd,CAA6BJ,GAAGK,IAAhC,EACNC,IADM,CACD,cAAM;AACVC,sBAAQC,GAAR,CAAY,wBAAZ,EAAsCR,EAAtC;AACD,aAHM,CAAP;AAID,WALD,MAKO;AACL,mBAAOS,QAAQC,MAAR,8BAA0CX,YAA1C,gBAAP;AACD;AACF;AArBwD;AAAA;AAAA,uCAuB1CY,KAvB0C,EAuBnC;AACpB,cAAIC,WAAW;AACbC,mBAAO,GADM;AAEbC,oBAAQ,OAFK;AAGbf,0BAAc,KAAKF,eAHN;AAIbkB,oBAAQJ;AAJK,WAAf;;AAOA,iBAAOhB,WAAWqB,iBAAX,CAA6B;AAClCC,iBAAK,iBAD6B;AAElCC,oBAAQ,MAF0B;AAGlCC,kBAAM;AACJC,uBAAS,CAACR,QAAD;AADL;AAH4B,WAA7B,EAONN,IAPM,CAOD,oBAAY;AAChB,gBAAIe,UAAUC,SAASH,IAAT,CAAcE,OAA5B;AACA,gBAAIA,QAAQ,GAAR,CAAJ,EAAkB;AAChB,qBAAOpB,EAAEsB,IAAF,CAAOF,QAAQ,GAAR,EAAaG,MAApB,CAAP;AACD,aAFD,MAEO;AACL,qBAAO,IAAP;AACD;AACF,WAdM,CAAP;AAeD;AA9CwD;;AAAA;AAAA;;AAiD3D,WAAO5B,iBAAP;AACD;;;;AAtDM6B,a;;AACAxB,O;;;;;;;;;;;;;;;;;;;;;AAuDPwB,cACGC,MADH,CACU,kBADV,EAEGC,OAFH,CAEW,mBAFX,EAEgClC,wBAFhC","file":"zabbixDBConnector.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\n\n/** @ngInject */\nfunction ZabbixDBConnectorFactory(datasourceSrv, backendSrv) {\n\n  class ZabbixDBConnector {\n\n    constructor(sqlDataSourceId) {\n      this.sqlDataSourceId = sqlDataSourceId;\n\n      // Try to load DS with given id to check it's exist\n      this.loadSQLDataSource(sqlDataSourceId);\n    }\n\n    loadSQLDataSource(datasourceId) {\n      let ds = _.find(datasourceSrv.getAll(), {'id': datasourceId});\n      if (ds) {\n        return datasourceSrv.loadDatasource(ds.name)\n        .then(ds => {\n          console.log('SQL data source loaded', ds);\n        });\n      } else {\n        return Promise.reject(`SQL Data Source with ID ${datasourceId} not found`);\n      }\n    }\n\n    invokeSQLQuery(query) {\n      let queryDef = {\n        refId: 'A',\n        format: 'table',\n        datasourceId: this.sqlDataSourceId,\n        rawSql: query\n      };\n\n      return backendSrv.datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          queries: [queryDef],\n        }\n      })\n      .then(response => {\n        let results = response.data.results;\n        if (results['A']) {\n          return _.head(results['A'].tables);\n        } else {\n          return null;\n        }\n      });\n    }\n  }\n\n  return ZabbixDBConnector;\n}\n\nangular\n  .module('grafana.services')\n  .factory('ZabbixDBConnector', ZabbixDBConnectorFactory);\n"]}