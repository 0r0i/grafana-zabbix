{"version":3,"sources":["../../src/datasource-zabbix/dataProcessor.js"],"names":["downsampleSeries","datapoints","time_to","ms_interval","func","downsampledSeries","timeWindow","from","to","points_sum","points_num","value_avg","frame","i","length","push","_","max","min","reverse","groupBy","interval","groupByCallback","utils","parseInterval","frames","point","Math","floor","grouped","mapValues","points","map","sortByTime","value","timestamp","Number","sumSeries","timeseries","new_timestamps","uniq","flatten","sortBy","interpolated_timeseries","series","timestamps","new_points","difference","new_series","concat","each","interpolateSeries","new_timeseries","sum","j","limit","order","n","orderByFunc","orderByCallback","aggregationFunctions","sortByIteratee","ts","values","sortedTimeseries","slice","SUM","COUNT","AVERAGE","MIN","MAX","MEDIAN","sorted","setAlias","alias","target","setAliasByRegex","extractText","str","pattern","extractPattern","RegExp","extractedValue","exec","scale","factor","delta","newSeries","deltaValue","groupByWrapper","groupFunc","aggregateByWrapper","aggregateFunc","flattenedPoints","aggregateWrapper","left","right","findNearestLeft","findNearestRight","linearInterpolation","point_index","indexOf","nearestRight","nearestLeft","timeShift","range","shift","parseTimeShiftInterval","time","unShiftTimeSeries","unshift","dp","metricFunctions","aggregateBy","average","partial","median","count","top","bottom","avg"],"mappings":"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","file":"dataProcessor.js","sourcesContent":["import _ from 'lodash';\nimport * as utils from './utils';\n\n/**\n * Downsample datapoints series\n */\nfunction downsampleSeries(datapoints, time_to, ms_interval, func) {\n  var downsampledSeries = [];\n  var timeWindow = {\n    from: time_to * 1000 - ms_interval,\n    to: time_to * 1000\n  };\n\n  var points_sum = 0;\n  var points_num = 0;\n  var value_avg = 0;\n  var frame = [];\n\n  for (var i = datapoints.length - 1; i >= 0; i -= 1) {\n    if (timeWindow.from < datapoints[i][1] && datapoints[i][1] <= timeWindow.to) {\n      points_sum += datapoints[i][0];\n      points_num++;\n      frame.push(datapoints[i][0]);\n    }\n    else {\n      value_avg = points_num ? points_sum / points_num : 0;\n\n      if (func === \"max\") {\n        downsampledSeries.push([_.max(frame), timeWindow.to]);\n      }\n      else if (func === \"min\") {\n        downsampledSeries.push([_.min(frame), timeWindow.to]);\n      }\n\n      // avg by default\n      else {\n        downsampledSeries.push([value_avg, timeWindow.to]);\n      }\n\n      // Shift time window\n      timeWindow.to = timeWindow.from;\n      timeWindow.from -= ms_interval;\n\n      points_sum = 0;\n      points_num = 0;\n      frame = [];\n\n      // Process point again\n      i++;\n    }\n  }\n  return downsampledSeries.reverse();\n}\n\n/**\n * Group points by given time interval\n * datapoints: [[<value>, <unixtime>], ...]\n */\nfunction groupBy(interval, groupByCallback, datapoints) {\n  var ms_interval = utils.parseInterval(interval);\n\n  // Calculate frame timestamps\n  var frames = _.groupBy(datapoints, function(point) {\n    // Calculate time for group of points\n    return Math.floor(point[1] / ms_interval) * ms_interval;\n  });\n\n  // frame: { '<unixtime>': [[<value>, <unixtime>], ...] }\n  // return [{ '<unixtime>': <value> }, { '<unixtime>': <value> }, ...]\n  var grouped = _.mapValues(frames, function(frame) {\n    var points = _.map(frame, function(point) {\n      return point[0];\n    });\n    return groupByCallback(points);\n  });\n\n  // Convert points to Grafana format\n  return sortByTime(_.map(grouped, function(value, timestamp) {\n    return [Number(value), Number(timestamp)];\n  }));\n}\n\nfunction sumSeries(timeseries) {\n\n  // Calculate new points for interpolation\n  var new_timestamps = _.uniq(_.map(_.flatten(timeseries, true), function(point) {\n    return point[1];\n  }));\n  new_timestamps = _.sortBy(new_timestamps);\n\n  var interpolated_timeseries = _.map(timeseries, function(series) {\n    var timestamps = _.map(series, function(point) {\n      return point[1];\n    });\n    var new_points = _.map(_.difference(new_timestamps, timestamps), function(timestamp) {\n      return [null, timestamp];\n    });\n    var new_series = series.concat(new_points);\n    return sortByTime(new_series);\n  });\n\n  _.each(interpolated_timeseries, interpolateSeries);\n\n  var new_timeseries = [];\n  var sum;\n  for (var i = new_timestamps.length - 1; i >= 0; i--) {\n    sum = 0;\n    for (var j = interpolated_timeseries.length - 1; j >= 0; j--) {\n      sum += interpolated_timeseries[j][i][0];\n    }\n    new_timeseries.push([sum, new_timestamps[i]]);\n  }\n\n  return sortByTime(new_timeseries);\n}\n\nfunction limit(order, n, orderByFunc, timeseries) {\n  let orderByCallback = aggregationFunctions[orderByFunc];\n  let sortByIteratee = (ts) => {\n    let values = _.map(ts.datapoints, (point) => {\n      return point[0];\n    });\n    return orderByCallback(values);\n  };\n  let sortedTimeseries = _.sortBy(timeseries, sortByIteratee);\n  if (order === 'bottom') {\n    return sortedTimeseries.slice(0, n);\n  } else {\n    return sortedTimeseries.slice(-n);\n  }\n}\n\nfunction SUM(values) {\n  var sum = 0;\n  _.each(values, function(value) {\n    sum += value;\n  });\n  return sum;\n}\n\nfunction COUNT(values) {\n  return values.length;\n}\n\nfunction AVERAGE(values) {\n  var sum = 0;\n  _.each(values, function(value) {\n    sum += value;\n  });\n  return sum / values.length;\n}\n\nfunction MIN(values) {\n  return _.min(values);\n}\n\nfunction MAX(values) {\n  return _.max(values);\n}\n\nfunction MEDIAN(values) {\n  var sorted = _.sortBy(values);\n  return sorted[Math.floor(sorted.length / 2)];\n}\n\nfunction setAlias(alias, timeseries) {\n  timeseries.target = alias;\n  return timeseries;\n}\n\nfunction setAliasByRegex(alias, timeseries) {\n  timeseries.target = extractText(timeseries.target, alias);\n  return timeseries;\n}\n\nfunction extractText(str, pattern) {\n  var extractPattern = new RegExp(pattern);\n  var extractedValue = extractPattern.exec(str);\n  extractedValue = extractedValue[0];\n  return extractedValue;\n}\n\nfunction scale(factor, datapoints) {\n  return _.map(datapoints, point => {\n    return [\n      point[0] * factor,\n      point[1]\n    ];\n  });\n}\n\nfunction delta(datapoints) {\n  let newSeries = [];\n  let deltaValue;\n  for (var i = 1; i < datapoints.length; i++) {\n    deltaValue = datapoints[i][0] - datapoints[i - 1][0];\n    newSeries.push([deltaValue, datapoints[i][1]]);\n  }\n  return newSeries;\n}\n\nfunction groupByWrapper(interval, groupFunc, datapoints) {\n  var groupByCallback = aggregationFunctions[groupFunc];\n  return groupBy(interval, groupByCallback, datapoints);\n}\n\nfunction aggregateByWrapper(interval, aggregateFunc, datapoints) {\n  // Flatten all points in frame and then just use groupBy()\n  var flattenedPoints = _.flatten(datapoints, true);\n  var groupByCallback = aggregationFunctions[aggregateFunc];\n  return groupBy(interval, groupByCallback, flattenedPoints);\n}\n\nfunction aggregateWrapper(groupByCallback, interval, datapoints) {\n  var flattenedPoints = _.flatten(datapoints, true);\n  return groupBy(interval, groupByCallback, flattenedPoints);\n}\n\nfunction sortByTime(series) {\n  return _.sortBy(series, function(point) {\n    return point[1];\n  });\n}\n\n/**\n * Interpolate series with gaps\n */\nfunction interpolateSeries(series) {\n  var left, right;\n\n  // Interpolate series\n  for (var i = series.length - 1; i >= 0; i--) {\n    if (!series[i][0]) {\n      left = findNearestLeft(series, series[i]);\n      right = findNearestRight(series, series[i]);\n      if (!left) {\n        left = right;\n      }\n      if (!right) {\n        right = left;\n      }\n      series[i][0] = linearInterpolation(series[i][1], left, right);\n    }\n  }\n  return series;\n}\n\nfunction linearInterpolation(timestamp, left, right) {\n  if (left[1] === right[1]) {\n    return (left[0] + right[0]) / 2;\n  } else {\n    return (left[0] + (right[0] - left[0]) / (right[1] - left[1]) * (timestamp - left[1]));\n  }\n}\n\nfunction findNearestRight(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestRight;\n  for (var i = point_index; i < series.length; i++) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return nearestRight;\n}\n\nfunction findNearestLeft(series, point) {\n  var point_index = _.indexOf(series, point);\n  var nearestLeft;\n  for (var i = point_index; i > 0; i--) {\n    if (series[i][0] !== null) {\n      return series[i];\n    }\n  }\n  return nearestLeft;\n}\n\nfunction timeShift(interval, range) {\n  let shift = utils.parseTimeShiftInterval(interval) / 1000;\n  return _.map(range, time => {\n    return time - shift;\n  });\n}\n\nfunction unShiftTimeSeries(interval, datapoints) {\n  let unshift = utils.parseTimeShiftInterval(interval);\n  return _.map(datapoints, dp => {\n    return [\n      dp[0],\n      dp[1] + unshift\n    ];\n  });\n}\n\nlet metricFunctions = {\n  groupBy: groupByWrapper,\n  scale: scale,\n  delta: delta,\n  aggregateBy: aggregateByWrapper,\n  average: _.partial(aggregateWrapper, AVERAGE),\n  min: _.partial(aggregateWrapper, MIN),\n  max: _.partial(aggregateWrapper, MAX),\n  median: _.partial(aggregateWrapper, MEDIAN),\n  sum: _.partial(aggregateWrapper, SUM),\n  count: _.partial(aggregateWrapper, COUNT),\n  sumSeries: sumSeries,\n  top: _.partial(limit, 'top'),\n  bottom: _.partial(limit, 'bottom'),\n  timeShift: timeShift,\n  setAlias: setAlias,\n  setAliasByRegex: setAliasByRegex\n};\n\nlet aggregationFunctions = {\n  avg: AVERAGE,\n  min: MIN,\n  max: MAX,\n  median: MEDIAN,\n  sum: SUM,\n  count: COUNT\n};\n\nexport default {\n  downsampleSeries: downsampleSeries,\n  groupBy: groupBy,\n  AVERAGE: AVERAGE,\n  MIN: MIN,\n  MAX: MAX,\n  MEDIAN: MEDIAN,\n  SUM: SUM,\n  COUNT: COUNT,\n  unShiftTimeSeries: unShiftTimeSeries,\n\n  get aggregationFunctions() {\n    return aggregationFunctions;\n  },\n\n  get metricFunctions() {\n    return metricFunctions;\n  }\n};"]}