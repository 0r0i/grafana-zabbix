{"version":3,"sources":["../../src/panel-triggers/module.js"],"names":["filterTriggers","triggers","triggerFilter","utils","isRegex","_","filter","trigger","buildRegex","test","description","moment","MetricsPanelCtrl","triggerPanelEditor","defaultSeverity","priority","severity","color","show","panelDefaults","datasource","group","host","application","hostField","statusField","severityField","lastChangeField","ageField","infoField","limit","showTriggers","sortTriggersBy","text","value","showEvents","triggerSeverity","okEventColor","ackEventColor","triggerStatusMap","defaultTimeFormat","TriggerPanelCtrl","$scope","$injector","$element","datasourceSrv","templateSrv","contextSrv","defaults","panel","cloneDeep","triggerList","refreshData","addEditorTab","onMetricsPanelRefresh","otherPanelInFullscreenMode","error","loading","setTimeQueryStart","self","get","then","zabbix","groupFilter","replaceTemplateVars","hostFilter","appFilter","getTriggers","map","triggerObj","lastchangeUnix","Number","lastchange","timestamp","unix","customLastChangeFormat","format","lastChangeFormat","age","fromNow","hosts","length","name","hostTechName","eventids","lastEvent","eventid","getAcknowledges","each","event","find","events","acknowledges","ack","clock","time","user","alias","surname","markAckEvents","sortBy","reverse","slice","setTimeQueryEnd","showComment","message","grafana_user","ack_message","zabbixAPI","acknowledgeEvent","refresh","templateUrl"],"mappings":"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","file":"module.js","sourcesContent":["/**\n * Grafana-Zabbix\n * Zabbix plugin for Grafana.\n * http://github.com/alexanderzobnin/grafana-zabbix\n *\n * Trigger panel.\n * This feature sponsored by CORE IT\n * http://www.coreit.fr\n *\n * Copyright 2015 Alexander Zobnin alexanderzobnin@gmail.com\n * Licensed under the Apache License, Version 2.0\n */\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport * as utils from '../datasource-zabbix/utils';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport {triggerPanelEditor} from './editor';\nimport './ack-tooltip.directive';\nimport './css/panel_triggers.css!';\n\nvar defaultSeverity = [\n  { priority: 0, severity: 'Not classified',  color: '#B7DBAB', show: true },\n  { priority: 1, severity: 'Information',     color: '#82B5D8', show: true },\n  { priority: 2, severity: 'Warning',         color: '#E5AC0E', show: true },\n  { priority: 3, severity: 'Average',         color: '#C15C17', show: true },\n  { priority: 4, severity: 'High',            color: '#BF1B00', show: true },\n  { priority: 5, severity: 'Disaster',        color: '#890F02', show: true }\n];\n\nvar panelDefaults = {\n  datasource: null,\n  triggers: {\n    group: {filter: \"\"},\n    host: {filter: \"\"},\n    application: {filter: \"\"},\n    trigger: {filter: \"\"}\n  },\n  hostField: true,\n  statusField: false,\n  severityField: false,\n  lastChangeField: true,\n  ageField: true,\n  infoField: true,\n  limit: 10,\n  showTriggers: 'all triggers',\n  sortTriggersBy: { text: 'last change', value: 'lastchange' },\n  showEvents: { text: 'Problems', value: '1' },\n  triggerSeverity: defaultSeverity,\n  okEventColor: 'rgba(0, 245, 153, 0.45)',\n  ackEventColor: 'rgba(0, 0, 0, 0)'\n};\n\nvar triggerStatusMap = {\n  '0': 'OK',\n  '1': 'Problem'\n};\n\nvar defaultTimeFormat = \"DD MMM YYYY HH:mm:ss\";\n\nclass TriggerPanelCtrl extends MetricsPanelCtrl {\n\n  /** @ngInject */\n  constructor($scope, $injector, $element, datasourceSrv, templateSrv, contextSrv) {\n    super($scope, $injector);\n    this.datasourceSrv = datasourceSrv;\n    this.templateSrv = templateSrv;\n    this.contextSrv = contextSrv;\n    this.triggerStatusMap = triggerStatusMap;\n    this.defaultTimeFormat = defaultTimeFormat;\n\n    // Load panel defaults\n    // _.cloneDeep() need for prevent changing shared defaultSeverity.\n    // Load object \"by value\" istead \"by reference\".\n    _.defaults(this.panel, _.cloneDeep(panelDefaults));\n\n    this.triggerList = [];\n    this.refreshData();\n  }\n\n  /**\n   * Override onInitMetricsPanelEditMode() method from MetricsPanelCtrl.\n   * We don't need metric editor from Metrics Panel.\n   */\n  onInitMetricsPanelEditMode() {\n    this.addEditorTab('Options', triggerPanelEditor, 2);\n  }\n\n  refresh() {\n    this.onMetricsPanelRefresh();\n  }\n\n  onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) { return; }\n\n    this.refreshData();\n  }\n\n  refreshData() {\n    // clear loading/error state\n    delete this.error;\n    this.loading = true;\n    this.setTimeQueryStart();\n\n    var self = this;\n\n    // Load datasource\n    return this.datasourceSrv.get(this.panel.datasource)\n    .then(datasource => {\n      var zabbix = datasource.zabbix;\n      var showEvents = self.panel.showEvents.value;\n      var triggerFilter = self.panel.triggers;\n\n      // Replace template variables\n      var groupFilter = datasource.replaceTemplateVars(triggerFilter.group.filter);\n      var hostFilter = datasource.replaceTemplateVars(triggerFilter.host.filter);\n      var appFilter = datasource.replaceTemplateVars(triggerFilter.application.filter);\n\n      var getTriggers = zabbix.getTriggers(groupFilter, hostFilter, appFilter, showEvents);\n      return getTriggers.then(triggers => {\n        return _.map(triggers, trigger => {\n          let triggerObj = trigger;\n\n          // Format last change and age\n          trigger.lastchangeUnix = Number(trigger.lastchange);\n          let timestamp = moment.unix(trigger.lastchangeUnix);\n          if (self.panel.customLastChangeFormat) {\n            // User defined format\n            triggerObj.lastchange = timestamp.format(self.panel.lastChangeFormat);\n          } else {\n            triggerObj.lastchange = timestamp.format(self.defaultTimeFormat);\n          }\n          triggerObj.age = timestamp.fromNow(true);\n\n          // Set host that the trigger belongs\n          if (trigger.hosts.length) {\n            triggerObj.host = trigger.hosts[0].name;\n            triggerObj.hostTechName = trigger.hosts[0].host;\n          }\n\n          // Set color\n          if (trigger.value === '1') {\n            // Problem state\n            triggerObj.color = self.panel.triggerSeverity[trigger.priority].color;\n          } else {\n            // OK state\n            triggerObj.color = self.panel.okEventColor;\n          }\n\n          triggerObj.severity = self.panel.triggerSeverity[trigger.priority].severity;\n          return triggerObj;\n        });\n      })\n      .then(triggerList => {\n\n        // Request acknowledges for trigger\n        var eventids = _.map(triggerList, trigger => {\n          return trigger.lastEvent.eventid;\n        });\n\n        return zabbix.getAcknowledges(eventids)\n        .then(events => {\n\n          // Map events to triggers\n          _.each(triggerList, trigger => {\n            var event = _.find(events, event => {\n              return event.eventid === trigger.lastEvent.eventid;\n            });\n\n            if (event) {\n              trigger.acknowledges = _.map(event.acknowledges, ack => {\n                let timestamp = moment.unix(ack.clock);\n                if (self.panel.customLastChangeFormat) {\n                  ack.time = timestamp.format(self.panel.lastChangeFormat);\n                } else {\n                  ack.time = timestamp.format(self.defaultTimeFormat);\n                }\n                ack.user = ack.alias + ' (' + ack.name + ' ' + ack.surname + ')';\n                return ack;\n              });\n\n              // Mark acknowledged triggers with different color\n              if (self.panel.markAckEvents && trigger.acknowledges.length) {\n                trigger.color = self.panel.ackEventColor;\n              }\n            }\n          });\n\n          // Filter triggers by description\n          var triggerFilter = self.panel.triggers.trigger.filter;\n          if (triggerFilter) {\n            triggerList = filterTriggers(triggerList, triggerFilter);\n          }\n\n          // Filter acknowledged triggers\n          if (self.panel.showTriggers === 'unacknowledged') {\n            triggerList = _.filter(triggerList, trigger => {\n              return !trigger.acknowledges;\n            });\n          } else if (self.panel.showTriggers === 'acknowledged') {\n            triggerList = _.filter(triggerList, 'acknowledges');\n          } else {\n            triggerList = triggerList;\n          }\n\n          // Filter triggers by severity\n          triggerList = _.filter(triggerList, trigger => {\n            return self.panel.triggerSeverity[trigger.priority].show;\n          });\n\n          // Sort triggers\n          if (self.panel.sortTriggersBy.value === 'priority') {\n            triggerList = _.sortBy(triggerList, 'priority').reverse();\n          } else {\n            triggerList = _.sortBy(triggerList, 'lastchangeUnix').reverse();\n          }\n\n          // Limit triggers number\n          self.triggerList  = triggerList.slice(0, self.panel.limit);\n\n          // Notify panel that request is finished\n          self.setTimeQueryEnd();\n          self.loading = false;\n        });\n      });\n    });\n  }\n\n  switchComment(trigger) {\n    trigger.showComment = !trigger.showComment;\n  }\n\n  acknowledgeTrigger(trigger, message) {\n    let eventid = trigger.lastEvent.eventid;\n    let grafana_user = this.contextSrv.user.name;\n    let ack_message = grafana_user + ' (Grafana): ' + message;\n    return this.datasourceSrv.get(this.panel.datasource)\n    .then(datasource => {\n      let zabbixAPI = datasource.zabbix.zabbixAPI;\n      return zabbixAPI.acknowledgeEvent(eventid, ack_message)\n      .then(() => {\n        this.refresh();\n      });\n    });\n  }\n}\n\nTriggerPanelCtrl.templateUrl = 'panel-triggers/module.html';\n\nfunction filterTriggers(triggers, triggerFilter) {\n  if (utils.isRegex(triggerFilter)) {\n    return _.filter(triggers, function(trigger) {\n      return utils.buildRegex(triggerFilter).test(trigger.description);\n    });\n  } else {\n    return _.filter(triggers, function(trigger) {\n      return trigger.description === triggerFilter;\n    });\n  }\n}\n\nexport {\n  TriggerPanelCtrl,\n  TriggerPanelCtrl as PanelCtrl\n};\n"]}